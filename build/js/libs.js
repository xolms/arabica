!function(t){"function"==typeof define&&define.amd?define(["jquery"],t):t("object"==typeof exports?require("jquery"):jQuery)}(function(t,e){function i(){return new Date(Date.UTC.apply(Date,arguments))}function a(){var t=new Date;return i(t.getFullYear(),t.getMonth(),t.getDate())}function s(t,e){return t.getUTCFullYear()===e.getUTCFullYear()&&t.getUTCMonth()===e.getUTCMonth()&&t.getUTCDate()===e.getUTCDate()}function n(i,a){return function(){return a!==e&&t.fn.datepicker.deprecated(a),this[i].apply(this,arguments)}}function o(t){return t&&!isNaN(t.getTime())}function r(e,i){var a=t(e).data(),s={},n=new RegExp("^"+i.toLowerCase()+"([A-Z])");i=new RegExp("^"+i.toLowerCase());for(var o in a)i.test(o)&&(s[o.replace(n,function(t,e){return e.toLowerCase()})]=a[o]);return s}function h(e){var i={};if(D[e]||(e=e.split("-")[0],D[e])){var a=D[e];return t.each(g,function(t,e){e in a&&(i[e]=a[e])}),i}}var l=function(){var e={get:function(t){return this.slice(t)[0]},contains:function(t){for(var e=t&&t.valueOf(),i=0,a=this.length;i<a;i++)if(0<=this[i].valueOf()-e&&this[i].valueOf()-e<864e5)return i;return-1},remove:function(t){this.splice(t,1)},replace:function(e){e&&(t.isArray(e)||(e=[e]),this.clear(),this.push.apply(this,e))},clear:function(){this.length=0},copy:function(){var t=new l;return t.replace(this),t}};return function(){var i=[];return i.push.apply(i,arguments),t.extend(i,e),i}}(),d=function(e,i){t.data(e,"datepicker",this),this._process_options(i),this.dates=new l,this.viewDate=this.o.defaultViewDate,this.focusDate=null,this.element=t(e),this.isInput=this.element.is("input"),this.inputField=this.isInput?this.element:this.element.find("input"),this.component=!!this.element.hasClass("date")&&this.element.find(".add-on, .input-group-addon, .btn"),this.component&&0===this.component.length&&(this.component=!1),this.isInline=!this.component&&this.element.is("div"),this.picker=t(m.template),this._check_template(this.o.templates.leftArrow)&&this.picker.find(".prev").html(this.o.templates.leftArrow),this._check_template(this.o.templates.rightArrow)&&this.picker.find(".next").html(this.o.templates.rightArrow),this._buildEvents(),this._attachEvents(),this.isInline?this.picker.addClass("datepicker-inline").appendTo(this.element):this.picker.addClass("datepicker-dropdown dropdown-menu"),this.o.rtl&&this.picker.addClass("datepicker-rtl"),this.o.calendarWeeks&&this.picker.find(".datepicker-days .datepicker-switch, thead .datepicker-title, tfoot .today, tfoot .clear").attr("colspan",function(t,e){return Number(e)+1}),this._process_options({startDate:this._o.startDate,endDate:this._o.endDate,daysOfWeekDisabled:this.o.daysOfWeekDisabled,daysOfWeekHighlighted:this.o.daysOfWeekHighlighted,datesDisabled:this.o.datesDisabled}),this._allow_update=!1,this.setViewMode(this.o.startView),this._allow_update=!0,this.fillDow(),this.fillMonths(),this.update(),this.isInline&&this.show()};d.prototype={constructor:d,_resolveViewName:function(e){return t.each(m.viewModes,function(i,a){if(e===i||-1!==t.inArray(e,a.names))return e=i,!1}),e},_resolveDaysOfWeek:function(e){return t.isArray(e)||(e=e.split(/[,\s]*/)),t.map(e,Number)},_check_template:function(i){try{return i!==e&&""!==i&&((i.match(/[<>]/g)||[]).length<=0||t(i).length>0)}catch(t){return!1}},_process_options:function(e){this._o=t.extend({},this._o,e);var s=this.o=t.extend({},this._o),n=s.language;D[n]||(n=n.split("-")[0],D[n]||(n=f.language)),s.language=n,s.startView=this._resolveViewName(s.startView),s.minViewMode=this._resolveViewName(s.minViewMode),s.maxViewMode=this._resolveViewName(s.maxViewMode),s.startView=Math.max(this.o.minViewMode,Math.min(this.o.maxViewMode,s.startView)),!0!==s.multidate&&(s.multidate=Number(s.multidate)||!1,!1!==s.multidate&&(s.multidate=Math.max(0,s.multidate))),s.multidateSeparator=String(s.multidateSeparator),s.weekStart%=7,s.weekEnd=(s.weekStart+6)%7;var o=m.parseFormat(s.format);s.startDate!==-1/0&&(s.startDate?s.startDate instanceof Date?s.startDate=this._local_to_utc(this._zero_time(s.startDate)):s.startDate=m.parseDate(s.startDate,o,s.language,s.assumeNearbyYear):s.startDate=-1/0),s.endDate!==1/0&&(s.endDate?s.endDate instanceof Date?s.endDate=this._local_to_utc(this._zero_time(s.endDate)):s.endDate=m.parseDate(s.endDate,o,s.language,s.assumeNearbyYear):s.endDate=1/0),s.daysOfWeekDisabled=this._resolveDaysOfWeek(s.daysOfWeekDisabled||[]),s.daysOfWeekHighlighted=this._resolveDaysOfWeek(s.daysOfWeekHighlighted||[]),s.datesDisabled=s.datesDisabled||[],t.isArray(s.datesDisabled)||(s.datesDisabled=s.datesDisabled.split(",")),s.datesDisabled=t.map(s.datesDisabled,function(t){return m.parseDate(t,o,s.language,s.assumeNearbyYear)});var r=String(s.orientation).toLowerCase().split(/\s+/g),h=s.orientation.toLowerCase();if(r=t.grep(r,function(t){return/^auto|left|right|top|bottom$/.test(t)}),s.orientation={x:"auto",y:"auto"},h&&"auto"!==h)if(1===r.length)switch(r[0]){case"top":case"bottom":s.orientation.y=r[0];break;case"left":case"right":s.orientation.x=r[0]}else h=t.grep(r,function(t){return/^left|right$/.test(t)}),s.orientation.x=h[0]||"auto",h=t.grep(r,function(t){return/^top|bottom$/.test(t)}),s.orientation.y=h[0]||"auto";else;if(s.defaultViewDate instanceof Date||"string"==typeof s.defaultViewDate)s.defaultViewDate=m.parseDate(s.defaultViewDate,o,s.language,s.assumeNearbyYear);else if(s.defaultViewDate){var l=s.defaultViewDate.year||(new Date).getFullYear(),d=s.defaultViewDate.month||0,c=s.defaultViewDate.day||1;s.defaultViewDate=i(l,d,c)}else s.defaultViewDate=a()},_events:[],_secondaryEvents:[],_applyEvents:function(t){for(var i,a,s,n=0;n<t.length;n++)i=t[n][0],2===t[n].length?(a=e,s=t[n][1]):3===t[n].length&&(a=t[n][1],s=t[n][2]),i.on(s,a)},_unapplyEvents:function(t){for(var i,a,s,n=0;n<t.length;n++)i=t[n][0],2===t[n].length?(s=e,a=t[n][1]):3===t[n].length&&(s=t[n][1],a=t[n][2]),i.off(a,s)},_buildEvents:function(){var e={keyup:t.proxy(function(e){-1===t.inArray(e.keyCode,[27,37,39,38,40,32,13,9])&&this.update()},this),keydown:t.proxy(this.keydown,this),paste:t.proxy(this.paste,this)};!0===this.o.showOnFocus&&(e.focus=t.proxy(this.show,this)),this.isInput?this._events=[[this.element,e]]:this.component&&this.inputField.length?this._events=[[this.inputField,e],[this.component,{click:t.proxy(this.show,this)}]]:this._events=[[this.element,{click:t.proxy(this.show,this),keydown:t.proxy(this.keydown,this)}]],this._events.push([this.element,"*",{blur:t.proxy(function(t){this._focused_from=t.target},this)}],[this.element,{blur:t.proxy(function(t){this._focused_from=t.target},this)}]),this.o.immediateUpdates&&this._events.push([this.element,{"changeYear changeMonth":t.proxy(function(t){this.update(t.date)},this)}]),this._secondaryEvents=[[this.picker,{click:t.proxy(this.click,this)}],[this.picker,".prev, .next",{click:t.proxy(this.navArrowsClick,this)}],[this.picker,".day:not(.disabled)",{click:t.proxy(this.dayCellClick,this)}],[t(window),{resize:t.proxy(this.place,this)}],[t(document),{"mousedown touchstart":t.proxy(function(t){this.element.is(t.target)||this.element.find(t.target).length||this.picker.is(t.target)||this.picker.find(t.target).length||this.isInline||this.hide()},this)}]]},_attachEvents:function(){this._detachEvents(),this._applyEvents(this._events)},_detachEvents:function(){this._unapplyEvents(this._events)},_attachSecondaryEvents:function(){this._detachSecondaryEvents(),this._applyEvents(this._secondaryEvents)},_detachSecondaryEvents:function(){this._unapplyEvents(this._secondaryEvents)},_trigger:function(e,i){var a=i||this.dates.get(-1),s=this._utc_to_local(a);this.element.trigger({type:e,date:s,viewMode:this.viewMode,dates:t.map(this.dates,this._utc_to_local),format:t.proxy(function(t,e){0===arguments.length?(t=this.dates.length-1,e=this.o.format):"string"==typeof t&&(e=t,t=this.dates.length-1),e=e||this.o.format;var i=this.dates.get(t);return m.formatDate(i,e,this.o.language)},this)})},show:function(){if(!(this.inputField.prop("disabled")||this.inputField.prop("readonly")&&!1===this.o.enableOnReadonly))return this.isInline||this.picker.appendTo(this.o.container),this.place(),this.picker.show(),this._attachSecondaryEvents(),this._trigger("show"),(window.navigator.msMaxTouchPoints||"ontouchstart"in document)&&this.o.disableTouchKeyboard&&t(this.element).blur(),this},hide:function(){return this.isInline||!this.picker.is(":visible")?this:(this.focusDate=null,this.picker.hide().detach(),this._detachSecondaryEvents(),this.setViewMode(this.o.startView),this.o.forceParse&&this.inputField.val()&&this.setValue(),this._trigger("hide"),this)},destroy:function(){return this.hide(),this._detachEvents(),this._detachSecondaryEvents(),this.picker.remove(),delete this.element.data().datepicker,this.isInput||delete this.element.data().date,this},paste:function(e){var i;if(e.originalEvent.clipboardData&&e.originalEvent.clipboardData.types&&-1!==t.inArray("text/plain",e.originalEvent.clipboardData.types))i=e.originalEvent.clipboardData.getData("text/plain");else{if(!window.clipboardData)return;i=window.clipboardData.getData("Text")}this.setDate(i),this.update(),e.preventDefault()},_utc_to_local:function(t){if(!t)return t;var e=new Date(t.getTime()+6e4*t.getTimezoneOffset());return e.getTimezoneOffset()!==t.getTimezoneOffset()&&(e=new Date(t.getTime()+6e4*e.getTimezoneOffset())),e},_local_to_utc:function(t){return t&&new Date(t.getTime()-6e4*t.getTimezoneOffset())},_zero_time:function(t){return t&&new Date(t.getFullYear(),t.getMonth(),t.getDate())},_zero_utc_time:function(t){return t&&i(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate())},getDates:function(){return t.map(this.dates,this._utc_to_local)},getUTCDates:function(){return t.map(this.dates,function(t){return new Date(t)})},getDate:function(){return this._utc_to_local(this.getUTCDate())},getUTCDate:function(){var t=this.dates.get(-1);return t!==e?new Date(t):null},clearDates:function(){this.inputField.val(""),this.update(),this._trigger("changeDate"),this.o.autoclose&&this.hide()},setDates:function(){var e=t.isArray(arguments[0])?arguments[0]:arguments;return this.update.apply(this,e),this._trigger("changeDate"),this.setValue(),this},setUTCDates:function(){var e=t.isArray(arguments[0])?arguments[0]:arguments;return this.setDates.apply(this,t.map(e,this._utc_to_local)),this},setDate:n("setDates"),setUTCDate:n("setUTCDates"),remove:n("destroy","Method `remove` is deprecated and will be removed in version 2.0. Use `destroy` instead"),setValue:function(){var t=this.getFormattedDate();return this.inputField.val(t),this},getFormattedDate:function(i){i===e&&(i=this.o.format);var a=this.o.language;return t.map(this.dates,function(t){return m.formatDate(t,i,a)}).join(this.o.multidateSeparator)},getStartDate:function(){return this.o.startDate},setStartDate:function(t){return this._process_options({startDate:t}),this.update(),this.updateNavArrows(),this},getEndDate:function(){return this.o.endDate},setEndDate:function(t){return this._process_options({endDate:t}),this.update(),this.updateNavArrows(),this},setDaysOfWeekDisabled:function(t){return this._process_options({daysOfWeekDisabled:t}),this.update(),this},setDaysOfWeekHighlighted:function(t){return this._process_options({daysOfWeekHighlighted:t}),this.update(),this},setDatesDisabled:function(t){return this._process_options({datesDisabled:t}),this.update(),this},place:function(){if(this.isInline)return this;var e=this.picker.outerWidth(),i=this.picker.outerHeight(),a=t(this.o.container),s=a.width(),n="body"===this.o.container?t(document).scrollTop():a.scrollTop(),o=a.offset(),r=[0];this.element.parents().each(function(){var e=t(this).css("z-index");"auto"!==e&&0!==Number(e)&&r.push(Number(e))});var h=Math.max.apply(Math,r)+this.o.zIndexOffset,l=this.component?this.component.parent().offset():this.element.offset(),d=this.component?this.component.outerHeight(!0):this.element.outerHeight(!1),c=this.component?this.component.outerWidth(!0):this.element.outerWidth(!1),u=l.left-o.left,p=l.top-o.top;"body"!==this.o.container&&(p+=n),this.picker.removeClass("datepicker-orient-top datepicker-orient-bottom datepicker-orient-right datepicker-orient-left"),"auto"!==this.o.orientation.x?(this.picker.addClass("datepicker-orient-"+this.o.orientation.x),"right"===this.o.orientation.x&&(u-=e-c)):l.left<0?(this.picker.addClass("datepicker-orient-left"),u-=l.left-10):u+e>s?(this.picker.addClass("datepicker-orient-right"),u+=c-e):this.o.rtl?this.picker.addClass("datepicker-orient-right"):this.picker.addClass("datepicker-orient-left");var f=this.o.orientation.y;if("auto"===f&&(f=-n+p-i<0?"bottom":"top"),this.picker.addClass("datepicker-orient-"+f),"top"===f?p-=i+parseInt(this.picker.css("padding-top")):p+=d,this.o.rtl){var g=s-(u+c);this.picker.css({top:p,right:g,zIndex:h})}else this.picker.css({top:p,left:u,zIndex:h});return this},_allow_update:!0,update:function(){if(!this._allow_update)return this;var e=this.dates.copy(),i=[],a=!1;return arguments.length?(t.each(arguments,t.proxy(function(t,e){e instanceof Date&&(e=this._local_to_utc(e)),i.push(e)},this)),a=!0):(i=this.isInput?this.element.val():this.element.data("date")||this.inputField.val(),i=i&&this.o.multidate?i.split(this.o.multidateSeparator):[i],delete this.element.data().date),i=t.map(i,t.proxy(function(t){return m.parseDate(t,this.o.format,this.o.language,this.o.assumeNearbyYear)},this)),i=t.grep(i,t.proxy(function(t){return!this.dateWithinRange(t)||!t},this),!0),this.dates.replace(i),this.o.updateViewDate&&(this.dates.length?this.viewDate=new Date(this.dates.get(-1)):this.viewDate<this.o.startDate?this.viewDate=new Date(this.o.startDate):this.viewDate>this.o.endDate?this.viewDate=new Date(this.o.endDate):this.viewDate=this.o.defaultViewDate),a?(this.setValue(),this.element.change()):this.dates.length&&String(e)!==String(this.dates)&&a&&(this._trigger("changeDate"),this.element.change()),!this.dates.length&&e.length&&(this._trigger("clearDate"),this.element.change()),this.fill(),this},fillDow:function(){if(this.o.showWeekDays){var e=this.o.weekStart,i="<tr>";for(this.o.calendarWeeks&&(i+='<th class="cw">&#160;</th>');e<this.o.weekStart+7;)i+='<th class="dow',-1!==t.inArray(e,this.o.daysOfWeekDisabled)&&(i+=" disabled"),i+='">'+D[this.o.language].daysMin[e++%7]+"</th>";i+="</tr>",this.picker.find(".datepicker-days thead").append(i)}},fillMonths:function(){for(var t=this._utc_to_local(this.viewDate),e="",i=0;i<12;i++)e+='<span class="month'+(t&&t.getMonth()===i?" focused":"")+'">'+D[this.o.language].monthsShort[i]+"</span>";this.picker.find(".datepicker-months td").html(e)},setRange:function(e){e&&e.length?this.range=t.map(e,function(t){return t.valueOf()}):delete this.range,this.fill()},getClassNames:function(e){var i=[],n=this.viewDate.getUTCFullYear(),o=this.viewDate.getUTCMonth(),r=a();return e.getUTCFullYear()<n||e.getUTCFullYear()===n&&e.getUTCMonth()<o?i.push("old"):(e.getUTCFullYear()>n||e.getUTCFullYear()===n&&e.getUTCMonth()>o)&&i.push("new"),this.focusDate&&e.valueOf()===this.focusDate.valueOf()&&i.push("focused"),this.o.todayHighlight&&s(e,r)&&i.push("today"),-1!==this.dates.contains(e)&&i.push("active"),this.dateWithinRange(e)||i.push("disabled"),this.dateIsDisabled(e)&&i.push("disabled","disabled-date"),-1!==t.inArray(e.getUTCDay(),this.o.daysOfWeekHighlighted)&&i.push("highlighted"),this.range&&(e>this.range[0]&&e<this.range[this.range.length-1]&&i.push("range"),-1!==t.inArray(e.valueOf(),this.range)&&i.push("selected"),e.valueOf()===this.range[0]&&i.push("range-start"),e.valueOf()===this.range[this.range.length-1]&&i.push("range-end")),i},_fill_yearsView:function(i,a,s,n,o,r,h){for(var l,d,c,u="",p=s/10,f=this.picker.find(i),g=Math.floor(n/s)*s,D=g+9*p,m=Math.floor(this.viewDate.getFullYear()/p)*p,y=t.map(this.dates,function(t){return Math.floor(t.getUTCFullYear()/p)*p}),v=g-p;v<=D+p;v+=p)l=[a],d=null,v===g-p?l.push("old"):v===D+p&&l.push("new"),-1!==t.inArray(v,y)&&l.push("active"),(v<o||v>r)&&l.push("disabled"),v===m&&l.push("focused"),h!==t.noop&&((c=h(new Date(v,0,1)))===e?c={}:"boolean"==typeof c?c={enabled:c}:"string"==typeof c&&(c={classes:c}),!1===c.enabled&&l.push("disabled"),c.classes&&(l=l.concat(c.classes.split(/\s+/))),c.tooltip&&(d=c.tooltip)),u+='<span class="'+l.join(" ")+'"'+(d?' title="'+d+'"':"")+">"+v+"</span>";f.find(".datepicker-switch").text(g+"-"+D),f.find("td").html(u)},fill:function(){var a,s,n=new Date(this.viewDate),o=n.getUTCFullYear(),r=n.getUTCMonth(),h=this.o.startDate!==-1/0?this.o.startDate.getUTCFullYear():-1/0,l=this.o.startDate!==-1/0?this.o.startDate.getUTCMonth():-1/0,d=this.o.endDate!==1/0?this.o.endDate.getUTCFullYear():1/0,c=this.o.endDate!==1/0?this.o.endDate.getUTCMonth():1/0,u=D[this.o.language].today||D.en.today||"",p=D[this.o.language].clear||D.en.clear||"",f=D[this.o.language].titleFormat||D.en.titleFormat;if(!isNaN(o)&&!isNaN(r)){this.picker.find(".datepicker-days .datepicker-switch").text(m.formatDate(n,f,this.o.language)),this.picker.find("tfoot .today").text(u).css("display",!0===this.o.todayBtn||"linked"===this.o.todayBtn?"table-cell":"none"),this.picker.find("tfoot .clear").text(p).css("display",!0===this.o.clearBtn?"table-cell":"none"),this.picker.find("thead .datepicker-title").text(this.o.title).css("display","string"==typeof this.o.title&&""!==this.o.title?"table-cell":"none"),this.updateNavArrows(),this.fillMonths();var g=i(o,r,0),y=g.getUTCDate();g.setUTCDate(y-(g.getUTCDay()-this.o.weekStart+7)%7);var v=new Date(g);g.getUTCFullYear()<100&&v.setUTCFullYear(g.getUTCFullYear()),v.setUTCDate(v.getUTCDate()+42),v=v.valueOf();for(var w,k,_=[];g.valueOf()<v;){if((w=g.getUTCDay())===this.o.weekStart&&(_.push("<tr>"),this.o.calendarWeeks)){var b=new Date(+g+(this.o.weekStart-w-7)%7*864e5),C=new Date(Number(b)+(11-b.getUTCDay())%7*864e5),T=new Date(Number(T=i(C.getUTCFullYear(),0,1))+(11-T.getUTCDay())%7*864e5),M=(C-T)/864e5/7+1;_.push('<td class="cw">'+M+"</td>")}(k=this.getClassNames(g)).push("day");var U=g.getUTCDate();this.o.beforeShowDay!==t.noop&&((s=this.o.beforeShowDay(this._utc_to_local(g)))===e?s={}:"boolean"==typeof s?s={enabled:s}:"string"==typeof s&&(s={classes:s}),!1===s.enabled&&k.push("disabled"),s.classes&&(k=k.concat(s.classes.split(/\s+/))),s.tooltip&&(a=s.tooltip),s.content&&(U=s.content)),k=t.isFunction(t.uniqueSort)?t.uniqueSort(k):t.unique(k),_.push('<td class="'+k.join(" ")+'"'+(a?' title="'+a+'"':"")+' data-date="'+g.getTime().toString()+'">'+U+"</td>"),a=null,w===this.o.weekEnd&&_.push("</tr>"),g.setUTCDate(g.getUTCDate()+1)}this.picker.find(".datepicker-days tbody").html(_.join(""));var x=D[this.o.language].monthsTitle||D.en.monthsTitle||"Months",V=this.picker.find(".datepicker-months").find(".datepicker-switch").text(this.o.maxViewMode<2?x:o).end().find("tbody span").removeClass("active");if(t.each(this.dates,function(t,e){e.getUTCFullYear()===o&&V.eq(e.getUTCMonth()).addClass("active")}),(o<h||o>d)&&V.addClass("disabled"),o===h&&V.slice(0,l).addClass("disabled"),o===d&&V.slice(c+1).addClass("disabled"),this.o.beforeShowMonth!==t.noop){var S=this;t.each(V,function(i,a){var s=new Date(o,i,1),n=S.o.beforeShowMonth(s);n===e?n={}:"boolean"==typeof n?n={enabled:n}:"string"==typeof n&&(n={classes:n}),!1!==n.enabled||t(a).hasClass("disabled")||t(a).addClass("disabled"),n.classes&&t(a).addClass(n.classes),n.tooltip&&t(a).prop("title",n.tooltip)})}this._fill_yearsView(".datepicker-years","year",10,o,h,d,this.o.beforeShowYear),this._fill_yearsView(".datepicker-decades","decade",100,o,h,d,this.o.beforeShowDecade),this._fill_yearsView(".datepicker-centuries","century",1e3,o,h,d,this.o.beforeShowCentury)}},updateNavArrows:function(){if(this._allow_update){var t,e,i=new Date(this.viewDate),a=i.getUTCFullYear(),s=i.getUTCMonth(),n=this.o.startDate!==-1/0?this.o.startDate.getUTCFullYear():-1/0,o=this.o.startDate!==-1/0?this.o.startDate.getUTCMonth():-1/0,r=this.o.endDate!==1/0?this.o.endDate.getUTCFullYear():1/0,h=this.o.endDate!==1/0?this.o.endDate.getUTCMonth():1/0,l=1;switch(this.viewMode){case 0:t=a<=n&&s<=o,e=a>=r&&s>=h;break;case 4:l*=10;case 3:l*=10;case 2:l*=10;case 1:t=Math.floor(a/l)*l<=n,e=Math.floor(a/l)*l+l>=r}this.picker.find(".prev").toggleClass("disabled",t),this.picker.find(".next").toggleClass("disabled",e)}},click:function(e){e.preventDefault(),e.stopPropagation();var s,n,o,r;(s=t(e.target)).hasClass("datepicker-switch")&&this.viewMode!==this.o.maxViewMode&&this.setViewMode(this.viewMode+1),s.hasClass("today")&&!s.hasClass("day")&&(this.setViewMode(0),this._setDate(a(),"linked"===this.o.todayBtn?null:"view")),s.hasClass("clear")&&this.clearDates(),s.hasClass("disabled")||(s.hasClass("month")||s.hasClass("year")||s.hasClass("decade")||s.hasClass("century"))&&(this.viewDate.setUTCDate(1),n=1,1===this.viewMode?(r=s.parent().find("span").index(s),o=this.viewDate.getUTCFullYear(),this.viewDate.setUTCMonth(r)):(r=0,o=Number(s.text()),this.viewDate.setUTCFullYear(o)),this._trigger(m.viewModes[this.viewMode-1].e,this.viewDate),this.viewMode===this.o.minViewMode?this._setDate(i(o,r,n)):(this.setViewMode(this.viewMode-1),this.fill())),this.picker.is(":visible")&&this._focused_from&&this._focused_from.focus(),delete this._focused_from},dayCellClick:function(e){var i=t(e.currentTarget).data("date"),a=new Date(i);this.o.updateViewDate&&(a.getUTCFullYear()!==this.viewDate.getUTCFullYear()&&this._trigger("changeYear",this.viewDate),a.getUTCMonth()!==this.viewDate.getUTCMonth()&&this._trigger("changeMonth",this.viewDate)),this._setDate(a)},navArrowsClick:function(e){var i=t(e.currentTarget).hasClass("prev")?-1:1;0!==this.viewMode&&(i*=12*m.viewModes[this.viewMode].navStep),this.viewDate=this.moveMonth(this.viewDate,i),this._trigger(m.viewModes[this.viewMode].e,this.viewDate),this.fill()},_toggle_multidate:function(t){var e=this.dates.contains(t);if(t||this.dates.clear(),-1!==e?(!0===this.o.multidate||this.o.multidate>1||this.o.toggleActive)&&this.dates.remove(e):!1===this.o.multidate?(this.dates.clear(),this.dates.push(t)):this.dates.push(t),"number"==typeof this.o.multidate)for(;this.dates.length>this.o.multidate;)this.dates.remove(0)},_setDate:function(t,e){e&&"date"!==e||this._toggle_multidate(t&&new Date(t)),(!e&&this.o.updateViewDate||"view"===e)&&(this.viewDate=t&&new Date(t)),this.fill(),this.setValue(),e&&"view"===e||this._trigger("changeDate"),this.inputField.trigger("change"),!this.o.autoclose||e&&"date"!==e||this.hide()},moveDay:function(t,e){var i=new Date(t);return i.setUTCDate(t.getUTCDate()+e),i},moveWeek:function(t,e){return this.moveDay(t,7*e)},moveMonth:function(t,e){if(!o(t))return this.o.defaultViewDate;if(!e)return t;var i,a,s=new Date(t.valueOf()),n=s.getUTCDate(),r=s.getUTCMonth(),h=Math.abs(e);if(e=e>0?1:-1,1===h)a=-1===e?function(){return s.getUTCMonth()===r}:function(){return s.getUTCMonth()!==i},i=r+e,s.setUTCMonth(i),i=(i+12)%12;else{for(var l=0;l<h;l++)s=this.moveMonth(s,e);i=s.getUTCMonth(),s.setUTCDate(n),a=function(){return i!==s.getUTCMonth()}}for(;a();)s.setUTCDate(--n),s.setUTCMonth(i);return s},moveYear:function(t,e){return this.moveMonth(t,12*e)},moveAvailableDate:function(t,e,i){do{if(t=this[i](t,e),!this.dateWithinRange(t))return!1;i="moveDay"}while(this.dateIsDisabled(t));return t},weekOfDateIsDisabled:function(e){return-1!==t.inArray(e.getUTCDay(),this.o.daysOfWeekDisabled)},dateIsDisabled:function(e){return this.weekOfDateIsDisabled(e)||t.grep(this.o.datesDisabled,function(t){return s(e,t)}).length>0},dateWithinRange:function(t){return t>=this.o.startDate&&t<=this.o.endDate},keydown:function(t){if(this.picker.is(":visible")){var e,i,a=!1,s=this.focusDate||this.viewDate;switch(t.keyCode){case 27:this.focusDate?(this.focusDate=null,this.viewDate=this.dates.get(-1)||this.viewDate,this.fill()):this.hide(),t.preventDefault(),t.stopPropagation();break;case 37:case 38:case 39:case 40:if(!this.o.keyboardNavigation||7===this.o.daysOfWeekDisabled.length)break;e=37===t.keyCode||38===t.keyCode?-1:1,0===this.viewMode?t.ctrlKey?(i=this.moveAvailableDate(s,e,"moveYear"))&&this._trigger("changeYear",this.viewDate):t.shiftKey?(i=this.moveAvailableDate(s,e,"moveMonth"))&&this._trigger("changeMonth",this.viewDate):37===t.keyCode||39===t.keyCode?i=this.moveAvailableDate(s,e,"moveDay"):this.weekOfDateIsDisabled(s)||(i=this.moveAvailableDate(s,e,"moveWeek")):1===this.viewMode?(38!==t.keyCode&&40!==t.keyCode||(e*=4),i=this.moveAvailableDate(s,e,"moveMonth")):2===this.viewMode&&(38!==t.keyCode&&40!==t.keyCode||(e*=4),i=this.moveAvailableDate(s,e,"moveYear")),i&&(this.focusDate=this.viewDate=i,this.setValue(),this.fill(),t.preventDefault());break;case 13:if(!this.o.forceParse)break;s=this.focusDate||this.dates.get(-1)||this.viewDate,this.o.keyboardNavigation&&(this._toggle_multidate(s),a=!0),this.focusDate=null,this.viewDate=this.dates.get(-1)||this.viewDate,this.setValue(),this.fill(),this.picker.is(":visible")&&(t.preventDefault(),t.stopPropagation(),this.o.autoclose&&this.hide());break;case 9:this.focusDate=null,this.viewDate=this.dates.get(-1)||this.viewDate,this.fill(),this.hide()}a&&(this.dates.length?this._trigger("changeDate"):this._trigger("clearDate"),this.inputField.trigger("change"))}else 40!==t.keyCode&&27!==t.keyCode||(this.show(),t.stopPropagation())},setViewMode:function(t){this.viewMode=t,this.picker.children("div").hide().filter(".datepicker-"+m.viewModes[this.viewMode].clsName).show(),this.updateNavArrows(),this._trigger("changeViewMode",new Date(this.viewDate))}};var c=function(e,i){t.data(e,"datepicker",this),this.element=t(e),this.inputs=t.map(i.inputs,function(t){return t.jquery?t[0]:t}),delete i.inputs,this.keepEmptyValues=i.keepEmptyValues,delete i.keepEmptyValues,p.call(t(this.inputs),i).on("changeDate",t.proxy(this.dateUpdated,this)),this.pickers=t.map(this.inputs,function(e){return t.data(e,"datepicker")}),this.updateDates()};c.prototype={updateDates:function(){this.dates=t.map(this.pickers,function(t){return t.getUTCDate()}),this.updateRanges()},updateRanges:function(){var e=t.map(this.dates,function(t){return t.valueOf()});t.each(this.pickers,function(t,i){i.setRange(e)})},dateUpdated:function(i){if(!this.updating){this.updating=!0;var a=t.data(i.target,"datepicker");if(a!==e){var s=a.getUTCDate(),n=this.keepEmptyValues,o=t.inArray(i.target,this.inputs),r=o-1,h=o+1,l=this.inputs.length;if(-1!==o){if(t.each(this.pickers,function(t,e){e.getUTCDate()||e!==a&&n||e.setUTCDate(s)}),s<this.dates[r])for(;r>=0&&s<this.dates[r];)this.pickers[r--].setUTCDate(s);else if(s>this.dates[h])for(;h<l&&s>this.dates[h];)this.pickers[h++].setUTCDate(s);this.updateDates(),delete this.updating}}}},destroy:function(){t.map(this.pickers,function(t){t.destroy()}),t(this.inputs).off("changeDate",this.dateUpdated),delete this.element.data().datepicker},remove:n("destroy","Method `remove` is deprecated and will be removed in version 2.0. Use `destroy` instead")};var u=t.fn.datepicker,p=function(i){var a=Array.apply(null,arguments);a.shift();var s;if(this.each(function(){var e=t(this),n=e.data("datepicker"),o="object"==typeof i&&i;if(!n){var l=r(this,"date"),u=h(t.extend({},f,l,o).language),p=t.extend({},f,u,l,o);e.hasClass("input-daterange")||p.inputs?(t.extend(p,{inputs:p.inputs||e.find("input").toArray()}),n=new c(this,p)):n=new d(this,p),e.data("datepicker",n)}"string"==typeof i&&"function"==typeof n[i]&&(s=n[i].apply(n,a))}),s===e||s instanceof d||s instanceof c)return this;if(this.length>1)throw new Error("Using only allowed for the collection of a single element ("+i+" function)");return s};t.fn.datepicker=p;var f=t.fn.datepicker.defaults={assumeNearbyYear:!1,autoclose:!1,beforeShowDay:t.noop,beforeShowMonth:t.noop,beforeShowYear:t.noop,beforeShowDecade:t.noop,beforeShowCentury:t.noop,calendarWeeks:!1,clearBtn:!1,toggleActive:!1,daysOfWeekDisabled:[],daysOfWeekHighlighted:[],datesDisabled:[],endDate:1/0,forceParse:!0,format:"mm/dd/yyyy",keepEmptyValues:!1,keyboardNavigation:!0,language:"en",minViewMode:0,maxViewMode:4,multidate:!1,multidateSeparator:",",orientation:"auto",rtl:!1,startDate:-1/0,startView:0,todayBtn:!1,todayHighlight:!1,updateViewDate:!0,weekStart:0,disableTouchKeyboard:!1,enableOnReadonly:!0,showOnFocus:!0,zIndexOffset:10,container:"body",immediateUpdates:!1,title:"",templates:{leftArrow:"&#x00AB;",rightArrow:"&#x00BB;"},showWeekDays:!0},g=t.fn.datepicker.locale_opts=["format","rtl","weekStart"];t.fn.datepicker.Constructor=d;var D=t.fn.datepicker.dates={en:{days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],daysShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],daysMin:["Su","Mo","Tu","We","Th","Fr","Sa"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],monthsShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],today:"Today",clear:"Clear",titleFormat:"MM yyyy"}},m={viewModes:[{names:["days","month"],clsName:"days",e:"changeMonth"},{names:["months","year"],clsName:"months",e:"changeYear",navStep:1},{names:["years","decade"],clsName:"years",e:"changeDecade",navStep:10},{names:["decades","century"],clsName:"decades",e:"changeCentury",navStep:100},{names:["centuries","millennium"],clsName:"centuries",e:"changeMillennium",navStep:1e3}],validParts:/dd?|DD?|mm?|MM?|yy(?:yy)?/g,nonpunctuation:/[^ -\/:-@\u5e74\u6708\u65e5\[-`{-~\t\n\r]+/g,parseFormat:function(t){if("function"==typeof t.toValue&&"function"==typeof t.toDisplay)return t;var e=t.replace(this.validParts,"\0").split("\0"),i=t.match(this.validParts);if(!e||!e.length||!i||0===i.length)throw new Error("Invalid date format.");return{separators:e,parts:i}},parseDate:function(i,s,n,o){function r(t,e){return!0===e&&(e=10),t<100&&(t+=2e3)>(new Date).getFullYear()+e&&(t-=100),t}function h(){var t=this.slice(0,l[p].length),e=l[p].slice(0,t.length);return t.toLowerCase()===e.toLowerCase()}if(!i)return e;if(i instanceof Date)return i;if("string"==typeof s&&(s=m.parseFormat(s)),s.toValue)return s.toValue(i,s,n);var l,c,u,p,f,g={d:"moveDay",m:"moveMonth",w:"moveWeek",y:"moveYear"},y={yesterday:"-1d",today:"+0d",tomorrow:"+1d"};if(i in y&&(i=y[i]),/^[\-+]\d+[dmwy]([\s,]+[\-+]\d+[dmwy])*$/i.test(i)){for(l=i.match(/([\-+]\d+)([dmwy])/gi),i=new Date,p=0;p<l.length;p++)c=l[p].match(/([\-+]\d+)([dmwy])/i),u=Number(c[1]),f=g[c[2].toLowerCase()],i=d.prototype[f](i,u);return d.prototype._zero_utc_time(i)}l=i&&i.match(this.nonpunctuation)||[];var v,w,k={},_=["yyyy","yy","M","MM","m","mm","d","dd"],b={yyyy:function(t,e){return t.setUTCFullYear(o?r(e,o):e)},m:function(t,e){if(isNaN(t))return t;for(e-=1;e<0;)e+=12;for(e%=12,t.setUTCMonth(e);t.getUTCMonth()!==e;)t.setUTCDate(t.getUTCDate()-1);return t},d:function(t,e){return t.setUTCDate(e)}};b.yy=b.yyyy,b.M=b.MM=b.mm=b.m,b.dd=b.d,i=a();var C=s.parts.slice();if(l.length!==C.length&&(C=t(C).filter(function(e,i){return-1!==t.inArray(i,_)}).toArray()),l.length===C.length){var T;for(p=0,T=C.length;p<T;p++){if(v=parseInt(l[p],10),c=C[p],isNaN(v))switch(c){case"MM":w=t(D[n].months).filter(h),v=t.inArray(w[0],D[n].months)+1;break;case"M":w=t(D[n].monthsShort).filter(h),v=t.inArray(w[0],D[n].monthsShort)+1}k[c]=v}var M,U;for(p=0;p<_.length;p++)(U=_[p])in k&&!isNaN(k[U])&&(M=new Date(i),b[U](M,k[U]),isNaN(M)||(i=M))}return i},formatDate:function(e,i,a){if(!e)return"";if("string"==typeof i&&(i=m.parseFormat(i)),i.toDisplay)return i.toDisplay(e,i,a);var s={d:e.getUTCDate(),D:D[a].daysShort[e.getUTCDay()],DD:D[a].days[e.getUTCDay()],m:e.getUTCMonth()+1,M:D[a].monthsShort[e.getUTCMonth()],MM:D[a].months[e.getUTCMonth()],yy:e.getUTCFullYear().toString().substring(2),yyyy:e.getUTCFullYear()};s.dd=(s.d<10?"0":"")+s.d,s.mm=(s.m<10?"0":"")+s.m,e=[];for(var n=t.extend([],i.separators),o=0,r=i.parts.length;o<=r;o++)n.length&&e.push(n.shift()),e.push(s[i.parts[o]]);return e.join("")},headTemplate:'<thead><tr><th colspan="7" class="datepicker-title"></th></tr><tr><th class="prev">'+f.templates.leftArrow+'</th><th colspan="5" class="datepicker-switch"></th><th class="next">'+f.templates.rightArrow+"</th></tr></thead>",contTemplate:'<tbody><tr><td colspan="7"></td></tr></tbody>',footTemplate:'<tfoot><tr><th colspan="7" class="today"></th></tr><tr><th colspan="7" class="clear"></th></tr></tfoot>'};m.template='<div class="datepicker"><div class="datepicker-days"><table class="table-condensed">'+m.headTemplate+"<tbody></tbody>"+m.footTemplate+'</table></div><div class="datepicker-months"><table class="table-condensed">'+m.headTemplate+m.contTemplate+m.footTemplate+'</table></div><div class="datepicker-years"><table class="table-condensed">'+m.headTemplate+m.contTemplate+m.footTemplate+'</table></div><div class="datepicker-decades"><table class="table-condensed">'+m.headTemplate+m.contTemplate+m.footTemplate+'</table></div><div class="datepicker-centuries"><table class="table-condensed">'+m.headTemplate+m.contTemplate+m.footTemplate+"</table></div></div>",t.fn.datepicker.DPGlobal=m,t.fn.datepicker.noConflict=function(){return t.fn.datepicker=u,this},t.fn.datepicker.version="1.7.1",t.fn.datepicker.deprecated=function(t){var e=window.console;e&&e.warn&&e.warn("DEPRECATED: "+t)},t(document).on("focus.datepicker.data-api click.datepicker.data-api",'[data-provide="datepicker"]',function(e){var i=t(this);i.data("datepicker")||(e.preventDefault(),p.call(i,"show"))}),t(function(){p.call(t('[data-provide="datepicker-inline"]'))})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRhdGVwaWNrZXIuanMiXSwibmFtZXMiOlsiZmFjdG9yeSIsImRlZmluZSIsImFtZCIsImV4cG9ydHMiLCJyZXF1aXJlIiwialF1ZXJ5IiwiJCIsInVuZGVmaW5lZCIsIlVUQ0RhdGUiLCJEYXRlIiwiVVRDIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJVVENUb2RheSIsInRvZGF5IiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJpc1VUQ0VxdWFscyIsImRhdGUxIiwiZGF0ZTIiLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImFsaWFzIiwibWV0aG9kIiwiZGVwcmVjYXRpb25Nc2ciLCJmbiIsImRhdGVwaWNrZXIiLCJkZXByZWNhdGVkIiwidGhpcyIsImlzVmFsaWREYXRlIiwiZCIsImlzTmFOIiwiZ2V0VGltZSIsIm9wdHNfZnJvbV9lbCIsImVsIiwicHJlZml4IiwiZGF0YSIsIm91dCIsInJlcGxhY2UiLCJSZWdFeHAiLCJ0b0xvd2VyQ2FzZSIsImtleSIsInRlc3QiLCJfIiwiYSIsIm9wdHNfZnJvbV9sb2NhbGUiLCJsYW5nIiwiZGF0ZXMiLCJzcGxpdCIsImVhY2giLCJsb2NhbGVfb3B0cyIsImkiLCJrIiwiRGF0ZUFycmF5IiwiZXh0cmFzIiwiZ2V0Iiwic2xpY2UiLCJjb250YWlucyIsInZhbCIsInZhbHVlT2YiLCJsIiwibGVuZ3RoIiwicmVtb3ZlIiwic3BsaWNlIiwibmV3X2FycmF5IiwiaXNBcnJheSIsImNsZWFyIiwicHVzaCIsImNvcHkiLCJleHRlbmQiLCJEYXRlcGlja2VyIiwiZWxlbWVudCIsIm9wdGlvbnMiLCJfcHJvY2Vzc19vcHRpb25zIiwidmlld0RhdGUiLCJvIiwiZGVmYXVsdFZpZXdEYXRlIiwiZm9jdXNEYXRlIiwiaXNJbnB1dCIsImlzIiwiaW5wdXRGaWVsZCIsImZpbmQiLCJjb21wb25lbnQiLCJoYXNDbGFzcyIsImlzSW5saW5lIiwicGlja2VyIiwiRFBHbG9iYWwiLCJ0ZW1wbGF0ZSIsIl9jaGVja190ZW1wbGF0ZSIsInRlbXBsYXRlcyIsImxlZnRBcnJvdyIsImh0bWwiLCJyaWdodEFycm93IiwiX2J1aWxkRXZlbnRzIiwiX2F0dGFjaEV2ZW50cyIsImFkZENsYXNzIiwiYXBwZW5kVG8iLCJydGwiLCJjYWxlbmRhcldlZWtzIiwiYXR0ciIsIk51bWJlciIsInN0YXJ0RGF0ZSIsIl9vIiwiZW5kRGF0ZSIsImRheXNPZldlZWtEaXNhYmxlZCIsImRheXNPZldlZWtIaWdobGlnaHRlZCIsImRhdGVzRGlzYWJsZWQiLCJfYWxsb3dfdXBkYXRlIiwic2V0Vmlld01vZGUiLCJzdGFydFZpZXciLCJmaWxsRG93IiwiZmlsbE1vbnRocyIsInVwZGF0ZSIsInNob3ciLCJwcm90b3R5cGUiLCJjb25zdHJ1Y3RvciIsIl9yZXNvbHZlVmlld05hbWUiLCJ2aWV3Iiwidmlld01vZGVzIiwidmlld01vZGUiLCJpbkFycmF5IiwibmFtZXMiLCJfcmVzb2x2ZURheXNPZldlZWsiLCJkYXlzT2ZXZWVrIiwibWFwIiwidG1wIiwibWF0Y2giLCJleCIsIm9wdHMiLCJsYW5ndWFnZSIsImRlZmF1bHRzIiwibWluVmlld01vZGUiLCJtYXhWaWV3TW9kZSIsIk1hdGgiLCJtYXgiLCJtaW4iLCJtdWx0aWRhdGUiLCJtdWx0aWRhdGVTZXBhcmF0b3IiLCJTdHJpbmciLCJ3ZWVrU3RhcnQiLCJ3ZWVrRW5kIiwiZm9ybWF0IiwicGFyc2VGb3JtYXQiLCJJbmZpbml0eSIsIl9sb2NhbF90b191dGMiLCJfemVyb190aW1lIiwicGFyc2VEYXRlIiwiYXNzdW1lTmVhcmJ5WWVhciIsInBsYyIsIm9yaWVudGF0aW9uIiwiX3BsYyIsImdyZXAiLCJ3b3JkIiwieCIsInkiLCJ5ZWFyIiwibW9udGgiLCJkYXkiLCJfZXZlbnRzIiwiX3NlY29uZGFyeUV2ZW50cyIsIl9hcHBseUV2ZW50cyIsImV2cyIsImNoIiwiZXYiLCJvbiIsIl91bmFwcGx5RXZlbnRzIiwib2ZmIiwiZXZlbnRzIiwia2V5dXAiLCJwcm94eSIsImUiLCJrZXlDb2RlIiwia2V5ZG93biIsInBhc3RlIiwic2hvd09uRm9jdXMiLCJmb2N1cyIsImNsaWNrIiwiYmx1ciIsIl9mb2N1c2VkX2Zyb20iLCJ0YXJnZXQiLCJpbW1lZGlhdGVVcGRhdGVzIiwiY2hhbmdlWWVhciBjaGFuZ2VNb250aCIsImRhdGUiLCJuYXZBcnJvd3NDbGljayIsImRheUNlbGxDbGljayIsIndpbmRvdyIsInJlc2l6ZSIsInBsYWNlIiwiZG9jdW1lbnQiLCJtb3VzZWRvd24gdG91Y2hzdGFydCIsImhpZGUiLCJfZGV0YWNoRXZlbnRzIiwiX2F0dGFjaFNlY29uZGFyeUV2ZW50cyIsIl9kZXRhY2hTZWNvbmRhcnlFdmVudHMiLCJfdHJpZ2dlciIsImV2ZW50IiwiYWx0ZGF0ZSIsImxvY2FsX2RhdGUiLCJfdXRjX3RvX2xvY2FsIiwidHJpZ2dlciIsInR5cGUiLCJpeCIsImZvcm1hdERhdGUiLCJwcm9wIiwiZW5hYmxlT25SZWFkb25seSIsImNvbnRhaW5lciIsIm5hdmlnYXRvciIsIm1zTWF4VG91Y2hQb2ludHMiLCJkaXNhYmxlVG91Y2hLZXlib2FyZCIsImRldGFjaCIsImZvcmNlUGFyc2UiLCJzZXRWYWx1ZSIsImRlc3Ryb3kiLCJkYXRlU3RyaW5nIiwib3JpZ2luYWxFdmVudCIsImNsaXBib2FyZERhdGEiLCJ0eXBlcyIsImdldERhdGEiLCJzZXREYXRlIiwicHJldmVudERlZmF1bHQiLCJ1dGMiLCJsb2NhbCIsImdldFRpbWV6b25lT2Zmc2V0IiwiX3plcm9fdXRjX3RpbWUiLCJnZXREYXRlcyIsImdldFVUQ0RhdGVzIiwic2VsZWN0ZWRfZGF0ZSIsImNsZWFyRGF0ZXMiLCJhdXRvY2xvc2UiLCJzZXREYXRlcyIsImFyZ3MiLCJzZXRVVENEYXRlcyIsInNldFVUQ0RhdGUiLCJmb3JtYXR0ZWQiLCJnZXRGb3JtYXR0ZWREYXRlIiwiam9pbiIsImdldFN0YXJ0RGF0ZSIsInNldFN0YXJ0RGF0ZSIsInVwZGF0ZU5hdkFycm93cyIsImdldEVuZERhdGUiLCJzZXRFbmREYXRlIiwic2V0RGF5c09mV2Vla0Rpc2FibGVkIiwic2V0RGF5c09mV2Vla0hpZ2hsaWdodGVkIiwic2V0RGF0ZXNEaXNhYmxlZCIsImNhbGVuZGFyV2lkdGgiLCJvdXRlcldpZHRoIiwiY2FsZW5kYXJIZWlnaHQiLCJvdXRlckhlaWdodCIsIndpbmRvd1dpZHRoIiwid2lkdGgiLCJzY3JvbGxUb3AiLCJhcHBlbmRPZmZzZXQiLCJvZmZzZXQiLCJwYXJlbnRzWmluZGV4IiwicGFyZW50cyIsIml0ZW1aSW5kZXgiLCJjc3MiLCJ6SW5kZXgiLCJ6SW5kZXhPZmZzZXQiLCJwYXJlbnQiLCJoZWlnaHQiLCJsZWZ0IiwidG9wIiwicmVtb3ZlQ2xhc3MiLCJ5b3JpZW50IiwicGFyc2VJbnQiLCJyaWdodCIsIm9sZERhdGVzIiwiZnJvbUFyZ3MiLCJkYXRlV2l0aGluUmFuZ2UiLCJ1cGRhdGVWaWV3RGF0ZSIsImNoYW5nZSIsImZpbGwiLCJzaG93V2Vla0RheXMiLCJkb3dDbnQiLCJkYXlzTWluIiwiYXBwZW5kIiwibG9jYWxEYXRlIiwibW9udGhzU2hvcnQiLCJzZXRSYW5nZSIsInJhbmdlIiwiZ2V0Q2xhc3NOYW1lcyIsImNscyIsInRvZGF5SGlnaGxpZ2h0IiwiZGF0ZUlzRGlzYWJsZWQiLCJnZXRVVENEYXkiLCJfZmlsbF95ZWFyc1ZpZXciLCJzZWxlY3RvciIsImNzc0NsYXNzIiwiZmFjdG9yIiwic3RhcnRZZWFyIiwiZW5kWWVhciIsImJlZm9yZUZuIiwiY2xhc3NlcyIsInRvb2x0aXAiLCJiZWZvcmUiLCJzdGVwIiwic3RhcnRWYWwiLCJmbG9vciIsImVuZFZhbCIsImZvY3VzZWRWYWwiLCJzZWxlY3RlZCIsImN1cnJWYWwiLCJub29wIiwiZW5hYmxlZCIsImNvbmNhdCIsInRleHQiLCJzdGFydE1vbnRoIiwiZW5kTW9udGgiLCJ0b2RheXR4dCIsImNsZWFydHh0IiwidGl0bGVGb3JtYXQiLCJ0b2RheUJ0biIsImNsZWFyQnRuIiwidGl0bGUiLCJwcmV2TW9udGgiLCJuZXh0TW9udGgiLCJzZXRVVENGdWxsWWVhciIsIndlZWtEYXkiLCJjbHNOYW1lIiwid3MiLCJ0aCIsInl0aCIsImNhbFdlZWsiLCJjb250ZW50IiwiYmVmb3JlU2hvd0RheSIsImlzRnVuY3Rpb24iLCJ1bmlxdWVTb3J0IiwidW5pcXVlIiwidG9TdHJpbmciLCJtb250aHNUaXRsZSIsIm1vbnRocyIsImVuZCIsImVxIiwiYmVmb3JlU2hvd01vbnRoIiwidGhhdCIsIm1vRGF0ZSIsImJlZm9yZVNob3dZZWFyIiwiYmVmb3JlU2hvd0RlY2FkZSIsImJlZm9yZVNob3dDZW50dXJ5IiwicHJldklzRGlzYWJsZWQiLCJuZXh0SXNEaXNhYmxlZCIsInRvZ2dsZUNsYXNzIiwic3RvcFByb3BhZ2F0aW9uIiwiX3NldERhdGUiLCJpbmRleCIsInNldFVUQ01vbnRoIiwidGltZXN0YW1wIiwiY3VycmVudFRhcmdldCIsImRpciIsIm5hdlN0ZXAiLCJtb3ZlTW9udGgiLCJfdG9nZ2xlX211bHRpZGF0ZSIsInRvZ2dsZUFjdGl2ZSIsIndoaWNoIiwibW92ZURheSIsIm5ld0RhdGUiLCJtb3ZlV2VlayIsIm5ld19tb250aCIsIm5ld19kYXRlIiwibWFnIiwiYWJzIiwibW92ZVllYXIiLCJtb3ZlQXZhaWxhYmxlRGF0ZSIsIndlZWtPZkRhdGVJc0Rpc2FibGVkIiwibmV3Vmlld0RhdGUiLCJkYXRlQ2hhbmdlZCIsImtleWJvYXJkTmF2aWdhdGlvbiIsImN0cmxLZXkiLCJzaGlmdEtleSIsImNoaWxkcmVuIiwiZmlsdGVyIiwiRGF0ZVJhbmdlUGlja2VyIiwiaW5wdXRzIiwianF1ZXJ5Iiwia2VlcEVtcHR5VmFsdWVzIiwiZGF0ZXBpY2tlclBsdWdpbiIsImNhbGwiLCJkYXRlVXBkYXRlZCIsInBpY2tlcnMiLCJ1cGRhdGVEYXRlcyIsInVwZGF0ZVJhbmdlcyIsInAiLCJ1cGRhdGluZyIsImRwIiwia2VlcF9lbXB0eV92YWx1ZXMiLCJqIiwib2xkIiwib3B0aW9uIiwiQXJyYXkiLCJzaGlmdCIsImludGVybmFsX3JldHVybiIsIiR0aGlzIiwiZWxvcHRzIiwibG9jb3B0cyIsInRvQXJyYXkiLCJFcnJvciIsIkNvbnN0cnVjdG9yIiwiZW4iLCJkYXlzIiwiZGF5c1Nob3J0IiwidmFsaWRQYXJ0cyIsIm5vbnB1bmN0dWF0aW9uIiwidG9WYWx1ZSIsInRvRGlzcGxheSIsInNlcGFyYXRvcnMiLCJwYXJ0cyIsImFzc3VtZU5lYXJieSIsImFwcGx5TmVhcmJ5WWVhciIsInRocmVzaG9sZCIsIm1hdGNoX3BhcnQiLCJtIiwicGFydCIsImZuX21hcCIsInciLCJkYXRlQWxpYXNlcyIsInllc3RlcmRheSIsInRvbW9ycm93IiwiZmlsdGVyZWQiLCJwYXJzZWQiLCJzZXR0ZXJzX29yZGVyIiwic2V0dGVyc19tYXAiLCJ5eXl5IiwidiIsImZwYXJ0cyIsImNudCIsIl9kYXRlIiwicyIsIkQiLCJERCIsIk0iLCJNTSIsInl5Iiwic3Vic3RyaW5nIiwiZGQiLCJtbSIsInNlcHMiLCJoZWFkVGVtcGxhdGUiLCJjb250VGVtcGxhdGUiLCJmb290VGVtcGxhdGUiLCJub0NvbmZsaWN0IiwidmVyc2lvbiIsIm1zZyIsImNvbnNvbGUiLCJ3YXJuIl0sIm1hcHBpbmdzIjoiQ0FNQyxTQUFTQSxHQUNnQixtQkFBWEMsUUFBeUJBLE9BQU9DLElBQ3ZDRCxRQUFRLFVBQVdELEdBRW5CQSxFQUQwQixpQkFBWkcsUUFDTkMsUUFBUSxVQUVSQyxRQU5oQixDQVFFLFNBQVNDLEVBQUdDLEdBQ1YsU0FBU0MsSUFDTCxPQUFPLElBQUlDLEtBQUtBLEtBQUtDLElBQUlDLE1BQU1GLEtBQU1HLFlBRXpDLFNBQVNDLElBQ0wsSUFBSUMsRUFBUSxJQUFJTCxLQUNoQixPQUFPRCxFQUFRTSxFQUFNQyxjQUFlRCxFQUFNRSxXQUFZRixFQUFNRyxXQUVoRSxTQUFTQyxFQUFZQyxFQUFPQyxHQUN4QixPQUNJRCxFQUFNRSxtQkFBcUJELEVBQU1DLGtCQUNqQ0YsRUFBTUcsZ0JBQWtCRixFQUFNRSxlQUM5QkgsRUFBTUksZUFBaUJILEVBQU1HLGFBR3JDLFNBQVNDLEVBQU1DLEVBQVFDLEdBQ25CLE9BQU8s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RixFQUFFcUIsR0FBR0MsV0FBVzhaLFdBQWEsV0FFekIsT0FEQXBiLEVBQUVxQixHQUFHQyxXQUFheVcsRUFDWHZXLE1BS1h4QixFQUFFcUIsR0FBR0MsV0FBVytaLFFBQVUsUUFFMUJyYixFQUFFcUIsR0FBR0MsV0FBV0MsV0FBYSxTQUFTK1osR0FDbEMsSUFBSUMsRUFBVWxRLE9BQU9rUSxRQUNqQkEsR0FBV0EsRUFBUUMsTUFDbkJELEVBQVFDLEtBQUssZUFBaUJGLElBUXRDdGIsRUFBRXdMLFVBQVV4QixHQUNSLHNEQUNBLDhCQUNBLFNBQVNNLEdBQ0wsSUFBSThOLEVBQVFwWSxFQUFFd0IsTUFDVjRXLEVBQU1wVyxLQUFLLGdCQUVmc0ksRUFBRWlELGlCQUVGNkosRUFBaUJDLEtBQUtlLEVBQU8sV0FHckNwWSxFQUFFLFdBQ0VvWCxFQUFpQkMsS0FBS3JYLEVBQUUiLCJmaWxlIjoiZGF0ZXBpY2tlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxyXG4gKiBEYXRlcGlja2VyIGZvciBCb290c3RyYXAgdjEuNy4xIChodHRwczovL2dpdGh1Yi5jb20vdXhzb2x1dGlvbnMvYm9vdHN0cmFwLWRhdGVwaWNrZXIpXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSB2Mi4wIChodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjApXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uKGZhY3Rvcnkpe1xyXG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XHJcbiAgICAgICAgZGVmaW5lKFtcImpxdWVyeVwiXSwgZmFjdG9yeSk7XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIGZhY3RvcnkocmVxdWlyZSgnanF1ZXJ5JykpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBmYWN0b3J5KGpRdWVyeSk7XHJcbiAgICB9XHJcbn0oZnVuY3Rpb24oJCwgdW5kZWZpbmVkKXtcclxuICAgIGZ1bmN0aW9uIFVUQ0RhdGUoKXtcclxuICAgICAgICByZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMuYXBwbHkoRGF0ZSwgYXJndW1lbnRzKSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBVVENUb2RheSgpe1xyXG4gICAgICAgIHZhciB0b2RheSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgcmV0dXJuIFVUQ0RhdGUodG9kYXkuZ2V0RnVsbFllYXIoKSwgdG9kYXkuZ2V0TW9udGgoKSwgdG9kYXkuZ2V0RGF0ZSgpKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGlzVVRDRXF1YWxzKGRhdGUxLCBkYXRlMikge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIGRhdGUxLmdldFVUQ0Z1bGxZZWFyKCkgPT09IGRhdGUyLmdldFVUQ0Z1bGxZZWFyKCkgJiZcclxuICAgICAgICAgICAgZGF0ZTEuZ2V0VVRDTW9udGgoKSA9PT0gZGF0ZTIuZ2V0VVRDTW9udGgoKSAmJlxyXG4gICAgICAgICAgICBkYXRlMS5nZXRVVENEYXRlKCkgPT09IGRhdGUyLmdldFVUQ0RhdGUoKVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBhbGlhcyhtZXRob2QsIGRlcHJlY2F0aW9uTXNnKXtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgaWYgKGRlcHJlY2F0aW9uTXNnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICQuZm4uZGF0ZXBpY2tlci5kZXByZWNhdGVkKGRlcHJlY2F0aW9uTXNnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXNbbWV0aG9kXS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBpc1ZhbGlkRGF0ZShkKSB7XHJcbiAgICAgICAgcmV0dXJuIGQgJiYgIWlzTmFOKGQuZ2V0VGltZSgpKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgRGF0ZUFycmF5ID0gKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgdmFyIGV4dHJhcyA9IHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbihpKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNsaWNlKGkpWzBdO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb250YWluczogZnVuY3Rpb24oZCl7XHJcbiAgICAgICAgICAgICAgICAvLyBBcnJheS5pbmRleE9mIGlzIG5vdCBjcm9zcy1icm93c2VyO1xyXG4gICAgICAgICAgICAgICAgLy8gJC5pbkFycmF5IGRvZXNuJ3Qgd29yayB3aXRoIERhdGVzXHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsID0gZCAmJiBkLnZhbHVlT2YoKTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGk9MCwgbD10aGlzLmxlbmd0aDsgaSA8IGw7IGkrKylcclxuICAgICAgICAgICAgICAgICAgICAvLyBVc2UgZGF0ZSBhcml0aG1ldGljIHRvIGFsbG93IGRhdGVzIHdpdGggZGlmZmVyZW50IHRpbWVzIHRvIG1hdGNoXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKDAgPD0gdGhpc1tpXS52YWx1ZU9mKCkgLSB2YWwgJiYgdGhpc1tpXS52YWx1ZU9mKCkgLSB2YWwgPCAxMDAwKjYwKjYwKjI0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbihpKXtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3BsaWNlKGksMSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHJlcGxhY2U6IGZ1bmN0aW9uKG5ld19hcnJheSl7XHJcbiAgICAgICAgICAgICAgICBpZiAoIW5ld19hcnJheSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBpZiAoISQuaXNBcnJheShuZXdfYXJyYXkpKVxyXG4gICAgICAgICAgICAgICAgICAgIG5ld19hcnJheSA9IFtuZXdfYXJyYXldO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhcigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wdXNoLmFwcGx5KHRoaXMsIG5ld19hcnJheSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNsZWFyOiBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sZW5ndGggPSAwO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb3B5OiBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgdmFyIGEgPSBuZXcgRGF0ZUFycmF5KCk7XHJcbiAgICAgICAgICAgICAgICBhLnJlcGxhY2UodGhpcyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICB2YXIgYSA9IFtdO1xyXG4gICAgICAgICAgICBhLnB1c2guYXBwbHkoYSwgYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgJC5leHRlbmQoYSwgZXh0cmFzKTtcclxuICAgICAgICAgICAgcmV0dXJuIGE7XHJcbiAgICAgICAgfTtcclxuICAgIH0pKCk7XHJcblxyXG5cclxuICAgIC8vIFBpY2tlciBvYmplY3RcclxuXHJcbiAgICB2YXIgRGF0ZXBpY2tlciA9IGZ1bmN0aW9uKGVsZW1lbnQsIG9wdGlvbnMpe1xyXG4gICAgICAgICQuZGF0YShlbGVtZW50LCAnZGF0ZXBpY2tlcicsIHRoaXMpO1xyXG4gICAgICAgIHRoaXMuX3Byb2Nlc3Nfb3B0aW9ucyhvcHRpb25zKTtcclxuXHJcbiAgICAgICAgdGhpcy5kYXRlcyA9IG5ldyBEYXRlQXJyYXkoKTtcclxuICAgICAgICB0aGlzLnZpZXdEYXRlID0gdGhpcy5vLmRlZmF1bHRWaWV3RGF0ZTtcclxuICAgICAgICB0aGlzLmZvY3VzRGF0ZSA9IG51bGw7XHJcblxyXG4gICAgICAgIHRoaXMuZWxlbWVudCA9ICQoZWxlbWVudCk7XHJcbiAgICAgICAgdGhpcy5pc0lucHV0ID0gdGhpcy5lbGVtZW50LmlzKCdpbnB1dCcpO1xyXG4gICAgICAgIHRoaXMuaW5wdXRGaWVsZCA9IHRoaXMuaXNJbnB1dCA/IHRoaXMuZWxlbWVudCA6IHRoaXMuZWxlbWVudC5maW5kKCdpbnB1dCcpO1xyXG4gICAgICAgIHRoaXMuY29tcG9uZW50ID0gdGhpcy5lbGVtZW50Lmhhc0NsYXNzKCdkYXRlJykgPyB0aGlzLmVsZW1lbnQuZmluZCgnLmFkZC1vbiwgLmlucHV0LWdyb3VwLWFkZG9uLCAuYnRuJykgOiBmYWxzZTtcclxuICAgICAgICBpZiAodGhpcy5jb21wb25lbnQgJiYgdGhpcy5jb21wb25lbnQubGVuZ3RoID09PSAwKVxyXG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaXNJbmxpbmUgPSAhdGhpcy5jb21wb25lbnQgJiYgdGhpcy5lbGVtZW50LmlzKCdkaXYnKTtcclxuXHJcbiAgICAgICAgdGhpcy5waWNrZXIgPSAkKERQR2xvYmFsLnRlbXBsYXRlKTtcclxuXHJcbiAgICAgICAgLy8gQ2hlY2tpbmcgdGVtcGxhdGVzIGFuZCBpbnNlcnRpbmdcclxuICAgICAgICBpZiAodGhpcy5fY2hlY2tfdGVtcGxhdGUodGhpcy5vLnRlbXBsYXRlcy5sZWZ0QXJyb3cpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGlja2VyLmZpbmQoJy5wcmV2JykuaHRtbCh0aGlzLm8udGVtcGxhdGVzLmxlZnRBcnJvdyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fY2hlY2tfdGVtcGxhdGUodGhpcy5vLnRlbXBsYXRlcy5yaWdodEFycm93KSkge1xyXG4gICAgICAgICAgICB0aGlzLnBpY2tlci5maW5kKCcubmV4dCcpLmh0bWwodGhpcy5vLnRlbXBsYXRlcy5yaWdodEFycm93KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2J1aWxkRXZlbnRzKCk7XHJcbiAgICAgICAgdGhpcy5fYXR0YWNoRXZlbnRzKCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlzSW5saW5lKXtcclxuICAgICAgICAgICAgdGhpcy5waWNrZXIuYWRkQ2xhc3MoJ2RhdGVwaWNrZXItaW5saW5lJykuYXBwZW5kVG8odGhpcy5lbGVtZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucGlja2VyLmFkZENsYXNzKCdkYXRlcGlja2VyLWRyb3Bkb3duIGRyb3Bkb3duLW1lbnUnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm8ucnRsKXtcclxuICAgICAgICAgICAgdGhpcy5waWNrZXIuYWRkQ2xhc3MoJ2RhdGVwaWNrZXItcnRsJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5vLmNhbGVuZGFyV2Vla3MpIHtcclxuICAgICAgICAgICAgdGhpcy5waWNrZXIuZmluZCgnLmRhdGVwaWNrZXItZGF5cyAuZGF0ZXBpY2tlci1zd2l0Y2gsIHRoZWFkIC5kYXRlcGlja2VyLXRpdGxlLCB0Zm9vdCAudG9kYXksIHRmb290IC5jbGVhcicpXHJcbiAgICAgICAgICAgICAgICAuYXR0cignY29sc3BhbicsIGZ1bmN0aW9uKGksIHZhbCl7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE51bWJlcih2YWwpICsgMTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fcHJvY2Vzc19vcHRpb25zKHtcclxuICAgICAgICAgICAgc3RhcnREYXRlOiB0aGlzLl9vLnN0YXJ0RGF0ZSxcclxuICAgICAgICAgICAgZW5kRGF0ZTogdGhpcy5fby5lbmREYXRlLFxyXG4gICAgICAgICAgICBkYXlzT2ZXZWVrRGlzYWJsZWQ6IHRoaXMuby5kYXlzT2ZXZWVrRGlzYWJsZWQsXHJcbiAgICAgICAgICAgIGRheXNPZldlZWtIaWdobGlnaHRlZDogdGhpcy5vLmRheXNPZldlZWtIaWdobGlnaHRlZCxcclxuICAgICAgICAgICAgZGF0ZXNEaXNhYmxlZDogdGhpcy5vLmRhdGVzRGlzYWJsZWRcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5fYWxsb3dfdXBkYXRlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zZXRWaWV3TW9kZSh0aGlzLm8uc3RhcnRWaWV3KTtcclxuICAgICAgICB0aGlzLl9hbGxvd191cGRhdGUgPSB0cnVlO1xyXG5cclxuICAgICAgICB0aGlzLmZpbGxEb3coKTtcclxuICAgICAgICB0aGlzLmZpbGxNb250aHMoKTtcclxuXHJcbiAgICAgICAgdGhpcy51cGRhdGUoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaXNJbmxpbmUpe1xyXG4gICAgICAgICAgICB0aGlzLnNob3coKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIERhdGVwaWNrZXIucHJvdG90eXBlID0ge1xyXG4gICAgICAgIGNvbnN0cnVjdG9yOiBEYXRlcGlja2VyLFxyXG5cclxuICAgICAgICBfcmVzb2x2ZVZpZXdOYW1lOiBmdW5jdGlvbih2aWV3KXtcclxuICAgICAgICAgICAgJC5lYWNoKERQR2xvYmFsLnZpZXdNb2RlcywgZnVuY3Rpb24oaSwgdmlld01vZGUpe1xyXG4gICAgICAgICAgICAgICAgaWYgKHZpZXcgPT09IGkgfHwgJC5pbkFycmF5KHZpZXcsIHZpZXdNb2RlLm5hbWVzKSAhPT0gLTEpe1xyXG4gICAgICAgICAgICAgICAgICAgIHZpZXcgPSBpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdmlldztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfcmVzb2x2ZURheXNPZldlZWs6IGZ1bmN0aW9uKGRheXNPZldlZWspe1xyXG4gICAgICAgICAgICBpZiAoISQuaXNBcnJheShkYXlzT2ZXZWVrKSlcclxuICAgICAgICAgICAgICAgIGRheXNPZldlZWsgPSBkYXlzT2ZXZWVrLnNwbGl0KC9bLFxcc10qLyk7XHJcbiAgICAgICAgICAgIHJldHVybiAkLm1hcChkYXlzT2ZXZWVrLCBOdW1iZXIpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9jaGVja190ZW1wbGF0ZTogZnVuY3Rpb24odG1wKXtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIC8vIElmIGVtcHR5XHJcbiAgICAgICAgICAgICAgICBpZiAodG1wID09PSB1bmRlZmluZWQgfHwgdG1wID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gSWYgbm8gaHRtbCwgZXZlcnl0aGluZyBva1xyXG4gICAgICAgICAgICAgICAgaWYgKCh0bXAubWF0Y2goL1s8Pl0vZykgfHwgW10pLmxlbmd0aCA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBDaGVja2luZyBpZiBodG1sIGlzIGZpbmVcclxuICAgICAgICAgICAgICAgIHZhciBqRG9tID0gJCh0bXApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGpEb20ubGVuZ3RoID4gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZXgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9wcm9jZXNzX29wdGlvbnM6IGZ1bmN0aW9uKG9wdHMpe1xyXG4gICAgICAgICAgICAvLyBTdG9yZSByYXcgb3B0aW9ucyBmb3IgcmVmZXJlbmNlXHJcbiAgICAgICAgICAgIHRoaXMuX28gPSAkLmV4dGVuZCh7fSwgdGhpcy5fbywgb3B0cyk7XHJcbiAgICAgICAgICAgIC8vIFByb2Nlc3NlZCBvcHRpb25zXHJcbiAgICAgICAgICAgIHZhciBvID0gdGhpcy5vID0gJC5leHRlbmQoe30sIHRoaXMuX28pO1xyXG5cclxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgXCJkZS1ERVwiIHN0eWxlIGRhdGUgaXMgYXZhaWxhYmxlLCBpZiBub3QgbGFuZ3VhZ2Ugc2hvdWxkXHJcbiAgICAgICAgICAgIC8vIGZhbGxiYWNrIHRvIDIgbGV0dGVyIGNvZGUgZWcgXCJkZVwiXHJcbiAgICAgICAgICAgIHZhciBsYW5nID0gby5sYW5ndWFnZTtcclxuICAgICAgICAgICAgaWYgKCFkYXRlc1tsYW5nXSl7XHJcbiAgICAgICAgICAgICAgICBsYW5nID0gbGFuZy5zcGxpdCgnLScpWzBdO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFkYXRlc1tsYW5nXSlcclxuICAgICAgICAgICAgICAgICAgICBsYW5nID0gZGVmYXVsdHMubGFuZ3VhZ2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgby5sYW5ndWFnZSA9IGxhbmc7XHJcblxyXG4gICAgICAgICAgICAvLyBSZXRyaWV2ZSB2aWV3IGluZGV4IGZyb20gYW55IGFsaWFzZXNcclxuICAgICAgICAgICAgby5zdGFydFZpZXcgPSB0aGlzLl9yZXNvbHZlVmlld05hbWUoby5zdGFydFZpZXcpO1xyXG4gICAgICAgICAgICBvLm1pblZpZXdNb2RlID0gdGhpcy5fcmVzb2x2ZVZpZXdOYW1lKG8ubWluVmlld01vZGUpO1xyXG4gICAgICAgICAgICBvLm1heFZpZXdNb2RlID0gdGhpcy5fcmVzb2x2ZVZpZXdOYW1lKG8ubWF4Vmlld01vZGUpO1xyXG5cclxuICAgICAgICAgICAgLy8gQ2hlY2sgdmlldyBpcyBiZXR3ZWVuIG1pbiBhbmQgbWF4XHJcbiAgICAgICAgICAgIG8uc3RhcnRWaWV3ID0gTWF0aC5tYXgodGhpcy5vLm1pblZpZXdNb2RlLCBNYXRoLm1pbih0aGlzLm8ubWF4Vmlld01vZGUsIG8uc3RhcnRWaWV3KSk7XHJcblxyXG4gICAgICAgICAgICAvLyB0cnVlLCBmYWxzZSwgb3IgTnVtYmVyID4gMFxyXG4gICAgICAgICAgICBpZiAoby5tdWx0aWRhdGUgIT09IHRydWUpe1xyXG4gICAgICAgICAgICAgICAgby5tdWx0aWRhdGUgPSBOdW1iZXIoby5tdWx0aWRhdGUpIHx8IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgaWYgKG8ubXVsdGlkYXRlICE9PSBmYWxzZSlcclxuICAgICAgICAgICAgICAgICAgICBvLm11bHRpZGF0ZSA9IE1hdGgubWF4KDAsIG8ubXVsdGlkYXRlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvLm11bHRpZGF0ZVNlcGFyYXRvciA9IFN0cmluZyhvLm11bHRpZGF0ZVNlcGFyYXRvcik7XHJcblxyXG4gICAgICAgICAgICBvLndlZWtTdGFydCAlPSA3O1xyXG4gICAgICAgICAgICBvLndlZWtFbmQgPSAoby53ZWVrU3RhcnQgKyA2KSAlIDc7XHJcblxyXG4gICAgICAgICAgICB2YXIgZm9ybWF0ID0gRFBHbG9iYWwucGFyc2VGb3JtYXQoby5mb3JtYXQpO1xyXG4gICAgICAgICAgICBpZiAoby5zdGFydERhdGUgIT09IC1JbmZpbml0eSl7XHJcbiAgICAgICAgICAgICAgICBpZiAoISFvLnN0YXJ0RGF0ZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG8uc3RhcnREYXRlIGluc3RhbmNlb2YgRGF0ZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgby5zdGFydERhdGUgPSB0aGlzLl9sb2NhbF90b191dGModGhpcy5femVyb190aW1lKG8uc3RhcnREYXRlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvLnN0YXJ0RGF0ZSA9IERQR2xvYmFsLnBhcnNlRGF0ZShvLnN0YXJ0RGF0ZSwgZm9ybWF0LCBvLmxhbmd1YWdlLCBvLmFzc3VtZU5lYXJieVllYXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgby5zdGFydERhdGUgPSAtSW5maW5pdHk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKG8uZW5kRGF0ZSAhPT0gSW5maW5pdHkpe1xyXG4gICAgICAgICAgICAgICAgaWYgKCEhby5lbmREYXRlKXtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoby5lbmREYXRlIGluc3RhbmNlb2YgRGF0ZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgby5lbmREYXRlID0gdGhpcy5fbG9jYWxfdG9fdXRjKHRoaXMuX3plcm9fdGltZShvLmVuZERhdGUpKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG8uZW5kRGF0ZSA9IERQR2xvYmFsLnBhcnNlRGF0ZShvLmVuZERhdGUsIGZvcm1hdCwgby5sYW5ndWFnZSwgby5hc3N1bWVOZWFyYnlZZWFyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG8uZW5kRGF0ZSA9IEluZmluaXR5O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBvLmRheXNPZldlZWtEaXNhYmxlZCA9IHRoaXMuX3Jlc29sdmVEYXlzT2ZXZWVrKG8uZGF5c09mV2Vla0Rpc2FibGVkfHxbXSk7XHJcbiAgICAgICAgICAgIG8uZGF5c09mV2Vla0hpZ2hsaWdodGVkID0gdGhpcy5fcmVzb2x2ZURheXNPZldlZWsoby5kYXlzT2ZXZWVrSGlnaGxpZ2h0ZWR8fFtdKTtcclxuXHJcbiAgICAgICAgICAgIG8uZGF0ZXNEaXNhYmxlZCA9IG8uZGF0ZXNEaXNhYmxlZHx8W107XHJcbiAgICAgICAgICAgIGlmICghJC5pc0FycmF5KG8uZGF0ZXNEaXNhYmxlZCkpIHtcclxuICAgICAgICAgICAgICAgIG8uZGF0ZXNEaXNhYmxlZCA9IG8uZGF0ZXNEaXNhYmxlZC5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG8uZGF0ZXNEaXNhYmxlZCA9ICQubWFwKG8uZGF0ZXNEaXNhYmxlZCwgZnVuY3Rpb24oZCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gRFBHbG9iYWwucGFyc2VEYXRlKGQsIGZvcm1hdCwgby5sYW5ndWFnZSwgby5hc3N1bWVOZWFyYnlZZWFyKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgcGxjID0gU3RyaW5nKG8ub3JpZW50YXRpb24pLnRvTG93ZXJDYXNlKCkuc3BsaXQoL1xccysvZyksXHJcbiAgICAgICAgICAgICAgICBfcGxjID0gby5vcmllbnRhdGlvbi50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICBwbGMgPSAkLmdyZXAocGxjLCBmdW5jdGlvbih3b3JkKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiAvXmF1dG98bGVmdHxyaWdodHx0b3B8Ym90dG9tJC8udGVzdCh3b3JkKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIG8ub3JpZW50YXRpb24gPSB7eDogJ2F1dG8nLCB5OiAnYXV0byd9O1xyXG4gICAgICAgICAgICBpZiAoIV9wbGMgfHwgX3BsYyA9PT0gJ2F1dG8nKVxyXG4gICAgICAgICAgICAgICAgOyAvLyBubyBhY3Rpb25cclxuICAgICAgICAgICAgZWxzZSBpZiAocGxjLmxlbmd0aCA9PT0gMSl7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHBsY1swXSl7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndG9wJzpcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdib3R0b20nOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvLm9yaWVudGF0aW9uLnkgPSBwbGNbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2xlZnQnOlxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3JpZ2h0JzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgby5vcmllbnRhdGlvbi54ID0gcGxjWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIF9wbGMgPSAkLmdyZXAocGxjLCBmdW5jdGlvbih3b3JkKXtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gL15sZWZ0fHJpZ2h0JC8udGVzdCh3b3JkKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgby5vcmllbnRhdGlvbi54ID0gX3BsY1swXSB8fCAnYXV0byc7XHJcblxyXG4gICAgICAgICAgICAgICAgX3BsYyA9ICQuZ3JlcChwbGMsIGZ1bmN0aW9uKHdvcmQpe1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAvXnRvcHxib3R0b20kLy50ZXN0KHdvcmQpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBvLm9yaWVudGF0aW9uLnkgPSBfcGxjWzBdIHx8ICdhdXRvJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoby5kZWZhdWx0Vmlld0RhdGUgaW5zdGFuY2VvZiBEYXRlIHx8IHR5cGVvZiBvLmRlZmF1bHRWaWV3RGF0ZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIG8uZGVmYXVsdFZpZXdEYXRlID0gRFBHbG9iYWwucGFyc2VEYXRlKG8uZGVmYXVsdFZpZXdEYXRlLCBmb3JtYXQsIG8ubGFuZ3VhZ2UsIG8uYXNzdW1lTmVhcmJ5WWVhcik7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoby5kZWZhdWx0Vmlld0RhdGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciB5ZWFyID0gby5kZWZhdWx0Vmlld0RhdGUueWVhciB8fCBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbW9udGggPSBvLmRlZmF1bHRWaWV3RGF0ZS5tb250aCB8fCAwO1xyXG4gICAgICAgICAgICAgICAgdmFyIGRheSA9IG8uZGVmYXVsdFZpZXdEYXRlLmRheSB8fCAxO1xyXG4gICAgICAgICAgICAgICAgby5kZWZhdWx0Vmlld0RhdGUgPSBVVENEYXRlKHllYXIsIG1vbnRoLCBkYXkpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgby5kZWZhdWx0Vmlld0RhdGUgPSBVVENUb2RheSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfZXZlbnRzOiBbXSxcclxuICAgICAgICBfc2Vjb25kYXJ5RXZlbnRzOiBbXSxcclxuICAgICAgICBfYXBwbHlFdmVudHM6IGZ1bmN0aW9uKGV2cyl7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGk9MCwgZWwsIGNoLCBldjsgaSA8IGV2cy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBlbCA9IGV2c1tpXVswXTtcclxuICAgICAgICAgICAgICAgIGlmIChldnNbaV0ubGVuZ3RoID09PSAyKXtcclxuICAgICAgICAgICAgICAgICAgICBjaCA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICBldiA9IGV2c1tpXVsxXTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZzW2ldLmxlbmd0aCA9PT0gMyl7XHJcbiAgICAgICAgICAgICAgICAgICAgY2ggPSBldnNbaV1bMV07XHJcbiAgICAgICAgICAgICAgICAgICAgZXYgPSBldnNbaV1bMl07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbC5vbihldiwgY2gpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfdW5hcHBseUV2ZW50czogZnVuY3Rpb24oZXZzKXtcclxuICAgICAgICAgICAgZm9yICh2YXIgaT0wLCBlbCwgZXYsIGNoOyBpIDwgZXZzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgIGVsID0gZXZzW2ldWzBdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2c1tpXS5sZW5ndGggPT09IDIpe1xyXG4gICAgICAgICAgICAgICAgICAgIGNoID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ID0gZXZzW2ldWzFdO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChldnNbaV0ubGVuZ3RoID09PSAzKXtcclxuICAgICAgICAgICAgICAgICAgICBjaCA9IGV2c1tpXVsxXTtcclxuICAgICAgICAgICAgICAgICAgICBldiA9IGV2c1tpXVsyXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsLm9mZihldiwgY2gpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfYnVpbGRFdmVudHM6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHZhciBldmVudHMgPSB7XHJcbiAgICAgICAgICAgICAgICBrZXl1cDogJC5wcm94eShmdW5jdGlvbihlKXtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJC5pbkFycmF5KGUua2V5Q29kZSwgWzI3LCAzNywgMzksIDM4LCA0MCwgMzIsIDEzLCA5XSkgPT09IC0xKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgfSwgdGhpcyksXHJcbiAgICAgICAgICAgICAgICBrZXlkb3duOiAkLnByb3h5KHRoaXMua2V5ZG93biwgdGhpcyksXHJcbiAgICAgICAgICAgICAgICBwYXN0ZTogJC5wcm94eSh0aGlzLnBhc3RlLCB0aGlzKVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuby5zaG93T25Gb2N1cyA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgZXZlbnRzLmZvY3VzID0gJC5wcm94eSh0aGlzLnNob3csIHRoaXMpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0lucHV0KSB7IC8vIHNpbmdsZSBpbnB1dFxyXG4gICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gW1xyXG4gICAgICAgICAgICAgICAgICAgIFt0aGlzLmVsZW1lbnQsIGV2ZW50c11cclxuICAgICAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gY29tcG9uZW50OiBpbnB1dCArIGJ1dHRvblxyXG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmNvbXBvbmVudCAmJiB0aGlzLmlucHV0RmllbGQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBbXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gRm9yIGNvbXBvbmVudHMgdGhhdCBhcmUgbm90IHJlYWRvbmx5LCBhbGxvdyBrZXlib2FyZCBuYXZcclxuICAgICAgICAgICAgICAgICAgICBbdGhpcy5pbnB1dEZpZWxkLCBldmVudHNdLFxyXG4gICAgICAgICAgICAgICAgICAgIFt0aGlzLmNvbXBvbmVudCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGljazogJC5wcm94eSh0aGlzLnNob3csIHRoaXMpXHJcbiAgICAgICAgICAgICAgICAgICAgfV1cclxuICAgICAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBbXHJcbiAgICAgICAgICAgICAgICAgICAgW3RoaXMuZWxlbWVudCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGljazogJC5wcm94eSh0aGlzLnNob3csIHRoaXMpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlkb3duOiAkLnByb3h5KHRoaXMua2V5ZG93biwgdGhpcylcclxuICAgICAgICAgICAgICAgICAgICB9XVxyXG4gICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9ldmVudHMucHVzaChcclxuICAgICAgICAgICAgICAgIC8vIENvbXBvbmVudDogbGlzdGVuIGZvciBibHVyIG9uIGVsZW1lbnQgZGVzY2VuZGFudHNcclxuICAgICAgICAgICAgICAgIFt0aGlzLmVsZW1lbnQsICcqJywge1xyXG4gICAgICAgICAgICAgICAgICAgIGJsdXI6ICQucHJveHkoZnVuY3Rpb24oZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZvY3VzZWRfZnJvbSA9IGUudGFyZ2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIHRoaXMpXHJcbiAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgIC8vIElucHV0OiBsaXN0ZW4gZm9yIGJsdXIgb24gZWxlbWVudFxyXG4gICAgICAgICAgICAgICAgW3RoaXMuZWxlbWVudCwge1xyXG4gICAgICAgICAgICAgICAgICAgIGJsdXI6ICQucHJveHkoZnVuY3Rpb24oZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZvY3VzZWRfZnJvbSA9IGUudGFyZ2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIHRoaXMpXHJcbiAgICAgICAgICAgICAgICB9XVxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuby5pbW1lZGlhdGVVcGRhdGVzKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBUcmlnZ2VyIGlucHV0IHVwZGF0ZXMgaW1tZWRpYXRlbHkgb24gY2hhbmdlZCB5ZWFyL21vbnRoXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHMucHVzaChbdGhpcy5lbGVtZW50LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2NoYW5nZVllYXIgY2hhbmdlTW9udGgnOiAkLnByb3h5KGZ1bmN0aW9uKGUpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZShlLmRhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIHRoaXMpXHJcbiAgICAgICAgICAgICAgICB9XSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3NlY29uZGFyeUV2ZW50cyA9IFtcclxuICAgICAgICAgICAgICAgIFt0aGlzLnBpY2tlciwge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiAkLnByb3h5KHRoaXMuY2xpY2ssIHRoaXMpXHJcbiAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgIFt0aGlzLnBpY2tlciwgJy5wcmV2LCAubmV4dCcsIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGljazogJC5wcm94eSh0aGlzLm5hdkFycm93c0NsaWNrLCB0aGlzKVxyXG4gICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICBbdGhpcy5waWNrZXIsICcuZGF5Om5vdCguZGlzYWJsZWQpJywge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiAkLnByb3h5KHRoaXMuZGF5Q2VsbENsaWNrLCB0aGlzKVxyXG4gICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICBbJCh3aW5kb3cpLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzaXplOiAkLnByb3h5KHRoaXMucGxhY2UsIHRoaXMpXHJcbiAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgIFskKGRvY3VtZW50KSwge1xyXG4gICAgICAgICAgICAgICAgICAgICdtb3VzZWRvd24gdG91Y2hzdGFydCc6ICQucHJveHkoZnVuY3Rpb24oZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENsaWNrZWQgb3V0c2lkZSB0aGUgZGF0ZXBpY2tlciwgaGlkZSBpdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuaXMoZS50YXJnZXQpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LmZpbmQoZS50YXJnZXQpLmxlbmd0aCB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGlja2VyLmlzKGUudGFyZ2V0KSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGlja2VyLmZpbmQoZS50YXJnZXQpLmxlbmd0aCB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNJbmxpbmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9LCB0aGlzKVxyXG4gICAgICAgICAgICAgICAgfV1cclxuICAgICAgICAgICAgXTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIF9hdHRhY2hFdmVudHM6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHRoaXMuX2RldGFjaEV2ZW50cygpO1xyXG4gICAgICAgICAgICB0aGlzLl9hcHBseUV2ZW50cyh0aGlzLl9ldmVudHMpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgX2RldGFjaEV2ZW50czogZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgdGhpcy5fdW5hcHBseUV2ZW50cyh0aGlzLl9ldmVudHMpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgX2F0dGFjaFNlY29uZGFyeUV2ZW50czogZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgdGhpcy5fZGV0YWNoU2Vjb25kYXJ5RXZlbnRzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2FwcGx5RXZlbnRzKHRoaXMuX3NlY29uZGFyeUV2ZW50cyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfZGV0YWNoU2Vjb25kYXJ5RXZlbnRzOiBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICB0aGlzLl91bmFwcGx5RXZlbnRzKHRoaXMuX3NlY29uZGFyeUV2ZW50cyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfdHJpZ2dlcjogZnVuY3Rpb24oZXZlbnQsIGFsdGRhdGUpe1xyXG4gICAgICAgICAgICB2YXIgZGF0ZSA9IGFsdGRhdGUgfHwgdGhpcy5kYXRlcy5nZXQoLTEpLFxyXG4gICAgICAgICAgICAgICAgbG9jYWxfZGF0ZSA9IHRoaXMuX3V0Y190b19sb2NhbChkYXRlKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC50cmlnZ2VyKHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IGV2ZW50LFxyXG4gICAgICAgICAgICAgICAgZGF0ZTogbG9jYWxfZGF0ZSxcclxuICAgICAgICAgICAgICAgIHZpZXdNb2RlOiB0aGlzLnZpZXdNb2RlLFxyXG4gICAgICAgICAgICAgICAgZGF0ZXM6ICQubWFwKHRoaXMuZGF0ZXMsIHRoaXMuX3V0Y190b19sb2NhbCksXHJcbiAgICAgICAgICAgICAgICBmb3JtYXQ6ICQucHJveHkoZnVuY3Rpb24oaXgsIGZvcm1hdCl7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpeCA9IHRoaXMuZGF0ZXMubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0ID0gdGhpcy5vLmZvcm1hdDtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpeCA9PT0gJ3N0cmluZycpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQgPSBpeDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXggPSB0aGlzLmRhdGVzLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdCA9IGZvcm1hdCB8fCB0aGlzLm8uZm9ybWF0O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXRlID0gdGhpcy5kYXRlcy5nZXQoaXgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBEUEdsb2JhbC5mb3JtYXREYXRlKGRhdGUsIGZvcm1hdCwgdGhpcy5vLmxhbmd1YWdlKTtcclxuICAgICAgICAgICAgICAgIH0sIHRoaXMpXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNob3c6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlucHV0RmllbGQucHJvcCgnZGlzYWJsZWQnKSB8fCAodGhpcy5pbnB1dEZpZWxkLnByb3AoJ3JlYWRvbmx5JykgJiYgdGhpcy5vLmVuYWJsZU9uUmVhZG9ubHkgPT09IGZhbHNlKSlcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzSW5saW5lKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5waWNrZXIuYXBwZW5kVG8odGhpcy5vLmNvbnRhaW5lcik7XHJcbiAgICAgICAgICAgIHRoaXMucGxhY2UoKTtcclxuICAgICAgICAgICAgdGhpcy5waWNrZXIuc2hvdygpO1xyXG4gICAgICAgICAgICB0aGlzLl9hdHRhY2hTZWNvbmRhcnlFdmVudHMoKTtcclxuICAgICAgICAgICAgdGhpcy5fdHJpZ2dlcignc2hvdycpO1xyXG4gICAgICAgICAgICBpZiAoKHdpbmRvdy5uYXZpZ2F0b3IubXNNYXhUb3VjaFBvaW50cyB8fCAnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudCkgJiYgdGhpcy5vLmRpc2FibGVUb3VjaEtleWJvYXJkKSB7XHJcbiAgICAgICAgICAgICAgICAkKHRoaXMuZWxlbWVudCkuYmx1cigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGhpZGU6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzSW5saW5lIHx8ICF0aGlzLnBpY2tlci5pcygnOnZpc2libGUnKSlcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB0aGlzLmZvY3VzRGF0ZSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMucGlja2VyLmhpZGUoKS5kZXRhY2goKTtcclxuICAgICAgICAgICAgdGhpcy5fZGV0YWNoU2Vjb25kYXJ5RXZlbnRzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0Vmlld01vZGUodGhpcy5vLnN0YXJ0Vmlldyk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vLmZvcmNlUGFyc2UgJiYgdGhpcy5pbnB1dEZpZWxkLnZhbCgpKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSgpO1xyXG4gICAgICAgICAgICB0aGlzLl90cmlnZ2VyKCdoaWRlJyk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xyXG4gICAgICAgICAgICB0aGlzLl9kZXRhY2hFdmVudHMoKTtcclxuICAgICAgICAgICAgdGhpcy5fZGV0YWNoU2Vjb25kYXJ5RXZlbnRzKCk7XHJcbiAgICAgICAgICAgIHRoaXMucGlja2VyLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5lbGVtZW50LmRhdGEoKS5kYXRlcGlja2VyO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNJbnB1dCl7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5lbGVtZW50LmRhdGEoKS5kYXRlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHBhc3RlOiBmdW5jdGlvbihlKXtcclxuICAgICAgICAgICAgdmFyIGRhdGVTdHJpbmc7XHJcbiAgICAgICAgICAgIGlmIChlLm9yaWdpbmFsRXZlbnQuY2xpcGJvYXJkRGF0YSAmJiBlLm9yaWdpbmFsRXZlbnQuY2xpcGJvYXJkRGF0YS50eXBlc1xyXG4gICAgICAgICAgICAgICAgJiYgJC5pbkFycmF5KCd0ZXh0L3BsYWluJywgZS5vcmlnaW5hbEV2ZW50LmNsaXBib2FyZERhdGEudHlwZXMpICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgZGF0ZVN0cmluZyA9IGUub3JpZ2luYWxFdmVudC5jbGlwYm9hcmREYXRhLmdldERhdGEoJ3RleHQvcGxhaW4nKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh3aW5kb3cuY2xpcGJvYXJkRGF0YSkge1xyXG4gICAgICAgICAgICAgICAgZGF0ZVN0cmluZyA9IHdpbmRvdy5jbGlwYm9hcmREYXRhLmdldERhdGEoJ1RleHQnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnNldERhdGUoZGF0ZVN0cmluZyk7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfdXRjX3RvX2xvY2FsOiBmdW5jdGlvbih1dGMpe1xyXG4gICAgICAgICAgICBpZiAoIXV0Yykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHV0YztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIGxvY2FsID0gbmV3IERhdGUodXRjLmdldFRpbWUoKSArICh1dGMuZ2V0VGltZXpvbmVPZmZzZXQoKSAqIDYwMDAwKSk7XHJcblxyXG4gICAgICAgICAgICBpZiAobG9jYWwuZ2V0VGltZXpvbmVPZmZzZXQoKSAhPT0gdXRjLmdldFRpbWV6b25lT2Zmc2V0KCkpIHtcclxuICAgICAgICAgICAgICAgIGxvY2FsID0gbmV3IERhdGUodXRjLmdldFRpbWUoKSArIChsb2NhbC5nZXRUaW1lem9uZU9mZnNldCgpICogNjAwMDApKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGxvY2FsO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgX2xvY2FsX3RvX3V0YzogZnVuY3Rpb24obG9jYWwpe1xyXG4gICAgICAgICAgICByZXR1cm4gbG9jYWwgJiYgbmV3IERhdGUobG9jYWwuZ2V0VGltZSgpIC0gKGxvY2FsLmdldFRpbWV6b25lT2Zmc2V0KCkqNjAwMDApKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIF96ZXJvX3RpbWU6IGZ1bmN0aW9uKGxvY2FsKXtcclxuICAgICAgICAgICAgcmV0dXJuIGxvY2FsICYmIG5ldyBEYXRlKGxvY2FsLmdldEZ1bGxZZWFyKCksIGxvY2FsLmdldE1vbnRoKCksIGxvY2FsLmdldERhdGUoKSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfemVyb191dGNfdGltZTogZnVuY3Rpb24odXRjKXtcclxuICAgICAgICAgICAgcmV0dXJuIHV0YyAmJiBVVENEYXRlKHV0Yy5nZXRVVENGdWxsWWVhcigpLCB1dGMuZ2V0VVRDTW9udGgoKSwgdXRjLmdldFVUQ0RhdGUoKSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0RGF0ZXM6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHJldHVybiAkLm1hcCh0aGlzLmRhdGVzLCB0aGlzLl91dGNfdG9fbG9jYWwpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldFVUQ0RhdGVzOiBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICByZXR1cm4gJC5tYXAodGhpcy5kYXRlcywgZnVuY3Rpb24oZCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoZCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldERhdGU6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl91dGNfdG9fbG9jYWwodGhpcy5nZXRVVENEYXRlKCkpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldFVUQ0RhdGU6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZF9kYXRlID0gdGhpcy5kYXRlcy5nZXQoLTEpO1xyXG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWRfZGF0ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoc2VsZWN0ZWRfZGF0ZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGNsZWFyRGF0ZXM6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHRoaXMuaW5wdXRGaWVsZC52YWwoJycpO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xyXG4gICAgICAgICAgICB0aGlzLl90cmlnZ2VyKCdjaGFuZ2VEYXRlJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vLmF1dG9jbG9zZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzZXREYXRlczogZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgdmFyIGFyZ3MgPSAkLmlzQXJyYXkoYXJndW1lbnRzWzBdKSA/IGFyZ3VtZW50c1swXSA6IGFyZ3VtZW50cztcclxuICAgICAgICAgICAgdGhpcy51cGRhdGUuYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICAgICAgICAgIHRoaXMuX3RyaWdnZXIoJ2NoYW5nZURhdGUnKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzZXRVVENEYXRlczogZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgdmFyIGFyZ3MgPSAkLmlzQXJyYXkoYXJndW1lbnRzWzBdKSA/IGFyZ3VtZW50c1swXSA6IGFyZ3VtZW50cztcclxuICAgICAgICAgICAgdGhpcy5zZXREYXRlcy5hcHBseSh0aGlzLCAkLm1hcChhcmdzLCB0aGlzLl91dGNfdG9fbG9jYWwpKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2V0RGF0ZTogYWxpYXMoJ3NldERhdGVzJyksXHJcbiAgICAgICAgc2V0VVRDRGF0ZTogYWxpYXMoJ3NldFVUQ0RhdGVzJyksXHJcbiAgICAgICAgcmVtb3ZlOiBhbGlhcygnZGVzdHJveScsICdNZXRob2QgYHJlbW92ZWAgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHZlcnNpb24gMi4wLiBVc2UgYGRlc3Ryb3lgIGluc3RlYWQnKSxcclxuXHJcbiAgICAgICAgc2V0VmFsdWU6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHZhciBmb3JtYXR0ZWQgPSB0aGlzLmdldEZvcm1hdHRlZERhdGUoKTtcclxuICAgICAgICAgICAgdGhpcy5pbnB1dEZpZWxkLnZhbChmb3JtYXR0ZWQpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRGb3JtYXR0ZWREYXRlOiBmdW5jdGlvbihmb3JtYXQpe1xyXG4gICAgICAgICAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICBmb3JtYXQgPSB0aGlzLm8uZm9ybWF0O1xyXG5cclxuICAgICAgICAgICAgdmFyIGxhbmcgPSB0aGlzLm8ubGFuZ3VhZ2U7XHJcbiAgICAgICAgICAgIHJldHVybiAkLm1hcCh0aGlzLmRhdGVzLCBmdW5jdGlvbihkKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiBEUEdsb2JhbC5mb3JtYXREYXRlKGQsIGZvcm1hdCwgbGFuZyk7XHJcbiAgICAgICAgICAgIH0pLmpvaW4odGhpcy5vLm11bHRpZGF0ZVNlcGFyYXRvcik7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0U3RhcnREYXRlOiBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vLnN0YXJ0RGF0ZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzZXRTdGFydERhdGU6IGZ1bmN0aW9uKHN0YXJ0RGF0ZSl7XHJcbiAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3Nfb3B0aW9ucyh7c3RhcnREYXRlOiBzdGFydERhdGV9KTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVOYXZBcnJvd3MoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0RW5kRGF0ZTogZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuby5lbmREYXRlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNldEVuZERhdGU6IGZ1bmN0aW9uKGVuZERhdGUpe1xyXG4gICAgICAgICAgICB0aGlzLl9wcm9jZXNzX29wdGlvbnMoe2VuZERhdGU6IGVuZERhdGV9KTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVOYXZBcnJvd3MoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2V0RGF5c09mV2Vla0Rpc2FibGVkOiBmdW5jdGlvbihkYXlzT2ZXZWVrRGlzYWJsZWQpe1xyXG4gICAgICAgICAgICB0aGlzLl9wcm9jZXNzX29wdGlvbnMoe2RheXNPZldlZWtEaXNhYmxlZDogZGF5c09mV2Vla0Rpc2FibGVkfSk7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNldERheXNPZldlZWtIaWdobGlnaHRlZDogZnVuY3Rpb24oZGF5c09mV2Vla0hpZ2hsaWdodGVkKXtcclxuICAgICAgICAgICAgdGhpcy5fcHJvY2Vzc19vcHRpb25zKHtkYXlzT2ZXZWVrSGlnaGxpZ2h0ZWQ6IGRheXNPZldlZWtIaWdobGlnaHRlZH0pO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzZXREYXRlc0Rpc2FibGVkOiBmdW5jdGlvbihkYXRlc0Rpc2FibGVkKXtcclxuICAgICAgICAgICAgdGhpcy5fcHJvY2Vzc19vcHRpb25zKHtkYXRlc0Rpc2FibGVkOiBkYXRlc0Rpc2FibGVkfSk7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHBsYWNlOiBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0lubGluZSlcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgY2FsZW5kYXJXaWR0aCA9IHRoaXMucGlja2VyLm91dGVyV2lkdGgoKSxcclxuICAgICAgICAgICAgICAgIGNhbGVuZGFySGVpZ2h0ID0gdGhpcy5waWNrZXIub3V0ZXJIZWlnaHQoKSxcclxuICAgICAgICAgICAgICAgIHZpc3VhbFBhZGRpbmcgPSAxMCxcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9ICQodGhpcy5vLmNvbnRhaW5lciksXHJcbiAgICAgICAgICAgICAgICB3aW5kb3dXaWR0aCA9IGNvbnRhaW5lci53aWR0aCgpLFxyXG4gICAgICAgICAgICAgICAgc2Nyb2xsVG9wID0gdGhpcy5vLmNvbnRhaW5lciA9PT0gJ2JvZHknID8gJChkb2N1bWVudCkuc2Nyb2xsVG9wKCkgOiBjb250YWluZXIuc2Nyb2xsVG9wKCksXHJcbiAgICAgICAgICAgICAgICBhcHBlbmRPZmZzZXQgPSBjb250YWluZXIub2Zmc2V0KCk7XHJcblxyXG4gICAgICAgICAgICB2YXIgcGFyZW50c1ppbmRleCA9IFswXTtcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnBhcmVudHMoKS5lYWNoKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICB2YXIgaXRlbVpJbmRleCA9ICQodGhpcykuY3NzKCd6LWluZGV4Jyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbVpJbmRleCAhPT0gJ2F1dG8nICYmIE51bWJlcihpdGVtWkluZGV4KSAhPT0gMCkgcGFyZW50c1ppbmRleC5wdXNoKE51bWJlcihpdGVtWkluZGV4KSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB2YXIgekluZGV4ID0gTWF0aC5tYXguYXBwbHkoTWF0aCwgcGFyZW50c1ppbmRleCkgKyB0aGlzLm8uekluZGV4T2Zmc2V0O1xyXG4gICAgICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpcy5jb21wb25lbnQgPyB0aGlzLmNvbXBvbmVudC5wYXJlbnQoKS5vZmZzZXQoKSA6IHRoaXMuZWxlbWVudC5vZmZzZXQoKTtcclxuICAgICAgICAgICAgdmFyIGhlaWdodCA9IHRoaXMuY29tcG9uZW50ID8gdGhpcy5jb21wb25lbnQub3V0ZXJIZWlnaHQodHJ1ZSkgOiB0aGlzLmVsZW1lbnQub3V0ZXJIZWlnaHQoZmFsc2UpO1xyXG4gICAgICAgICAgICB2YXIgd2lkdGggPSB0aGlzLmNvbXBvbmVudCA/IHRoaXMuY29tcG9uZW50Lm91dGVyV2lkdGgodHJ1ZSkgOiB0aGlzLmVsZW1lbnQub3V0ZXJXaWR0aChmYWxzZSk7XHJcbiAgICAgICAgICAgIHZhciBsZWZ0ID0gb2Zmc2V0LmxlZnQgLSBhcHBlbmRPZmZzZXQubGVmdDtcclxuICAgICAgICAgICAgdmFyIHRvcCA9IG9mZnNldC50b3AgLSBhcHBlbmRPZmZzZXQudG9wO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuby5jb250YWluZXIgIT09ICdib2R5Jykge1xyXG4gICAgICAgICAgICAgICAgdG9wICs9IHNjcm9sbFRvcDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5waWNrZXIucmVtb3ZlQ2xhc3MoXHJcbiAgICAgICAgICAgICAgICAnZGF0ZXBpY2tlci1vcmllbnQtdG9wIGRhdGVwaWNrZXItb3JpZW50LWJvdHRvbSAnK1xyXG4gICAgICAgICAgICAgICAgJ2RhdGVwaWNrZXItb3JpZW50LXJpZ2h0IGRhdGVwaWNrZXItb3JpZW50LWxlZnQnXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vLm9yaWVudGF0aW9uLnggIT09ICdhdXRvJyl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBpY2tlci5hZGRDbGFzcygnZGF0ZXBpY2tlci1vcmllbnQtJyArIHRoaXMuby5vcmllbnRhdGlvbi54KTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm8ub3JpZW50YXRpb24ueCA9PT0gJ3JpZ2h0JylcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0IC09IGNhbGVuZGFyV2lkdGggLSB3aWR0aDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBhdXRvIHggb3JpZW50YXRpb24gaXMgYmVzdC1wbGFjZW1lbnQ6IGlmIGl0IGNyb3NzZXMgYSB3aW5kb3dcclxuICAgICAgICAgICAgLy8gZWRnZSwgZnVkZ2UgaXQgc2lkZXdheXNcclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAob2Zmc2V0LmxlZnQgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29tcG9uZW50IGlzIG91dHNpZGUgdGhlIHdpbmRvdyBvbiB0aGUgbGVmdCBzaWRlLiBNb3ZlIGl0IGludG8gdmlzaWJsZSByYW5nZVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGlja2VyLmFkZENsYXNzKCdkYXRlcGlja2VyLW9yaWVudC1sZWZ0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdCAtPSBvZmZzZXQubGVmdCAtIHZpc3VhbFBhZGRpbmc7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGxlZnQgKyBjYWxlbmRhcldpZHRoID4gd2luZG93V2lkdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgY2FsZW5kYXIgcGFzc2VzIHRoZSB3aWRvdyByaWdodCBlZGdlLiBBbGlnbiBpdCB0byBjb21wb25lbnQgcmlnaHQgc2lkZVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGlja2VyLmFkZENsYXNzKCdkYXRlcGlja2VyLW9yaWVudC1yaWdodCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQgKz0gd2lkdGggLSBjYWxlbmRhcldpZHRoO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vLnJ0bCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBEZWZhdWx0IHRvIHJpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGlja2VyLmFkZENsYXNzKCdkYXRlcGlja2VyLW9yaWVudC1yaWdodCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERlZmF1bHQgdG8gbGVmdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBpY2tlci5hZGRDbGFzcygnZGF0ZXBpY2tlci1vcmllbnQtbGVmdCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gYXV0byB5IG9yaWVudGF0aW9uIGlzIGJlc3Qtc2l0dWF0aW9uOiB0b3Agb3IgYm90dG9tLCBubyBmdWRnaW5nLFxyXG4gICAgICAgICAgICAvLyBkZWNpc2lvbiBiYXNlZCBvbiB3aGljaCBzaG93cyBtb3JlIG9mIHRoZSBjYWxlbmRhclxyXG4gICAgICAgICAgICB2YXIgeW9yaWVudCA9IHRoaXMuby5vcmllbnRhdGlvbi55LFxyXG4gICAgICAgICAgICAgICAgdG9wX292ZXJmbG93O1xyXG4gICAgICAgICAgICBpZiAoeW9yaWVudCA9PT0gJ2F1dG8nKXtcclxuICAgICAgICAgICAgICAgIHRvcF9vdmVyZmxvdyA9IC1zY3JvbGxUb3AgKyB0b3AgLSBjYWxlbmRhckhlaWdodDtcclxuICAgICAgICAgICAgICAgIHlvcmllbnQgPSB0b3Bfb3ZlcmZsb3cgPCAwID8gJ2JvdHRvbScgOiAndG9wJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5waWNrZXIuYWRkQ2xhc3MoJ2RhdGVwaWNrZXItb3JpZW50LScgKyB5b3JpZW50KTtcclxuICAgICAgICAgICAgaWYgKHlvcmllbnQgPT09ICd0b3AnKVxyXG4gICAgICAgICAgICAgICAgdG9wIC09IGNhbGVuZGFySGVpZ2h0ICsgcGFyc2VJbnQodGhpcy5waWNrZXIuY3NzKCdwYWRkaW5nLXRvcCcpKTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgdG9wICs9IGhlaWdodDtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm8ucnRsKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmlnaHQgPSB3aW5kb3dXaWR0aCAtIChsZWZ0ICsgd2lkdGgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5waWNrZXIuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICB0b3A6IHRvcCxcclxuICAgICAgICAgICAgICAgICAgICByaWdodDogcmlnaHQsXHJcbiAgICAgICAgICAgICAgICAgICAgekluZGV4OiB6SW5kZXhcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5waWNrZXIuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICB0b3A6IHRvcCxcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiBsZWZ0LFxyXG4gICAgICAgICAgICAgICAgICAgIHpJbmRleDogekluZGV4XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfYWxsb3dfdXBkYXRlOiB0cnVlLFxyXG4gICAgICAgIHVwZGF0ZTogZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9hbGxvd191cGRhdGUpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuXHJcbiAgICAgICAgICAgIHZhciBvbGREYXRlcyA9IHRoaXMuZGF0ZXMuY29weSgpLFxyXG4gICAgICAgICAgICAgICAgZGF0ZXMgPSBbXSxcclxuICAgICAgICAgICAgICAgIGZyb21BcmdzID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKXtcclxuICAgICAgICAgICAgICAgICQuZWFjaChhcmd1bWVudHMsICQucHJveHkoZnVuY3Rpb24oaSwgZGF0ZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGUgaW5zdGFuY2VvZiBEYXRlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlID0gdGhpcy5fbG9jYWxfdG9fdXRjKGRhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGVzLnB1c2goZGF0ZSk7XHJcbiAgICAgICAgICAgICAgICB9LCB0aGlzKSk7XHJcbiAgICAgICAgICAgICAgICBmcm9tQXJncyA9IHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBkYXRlcyA9IHRoaXMuaXNJbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5lbGVtZW50LnZhbCgpXHJcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmVsZW1lbnQuZGF0YSgnZGF0ZScpIHx8IHRoaXMuaW5wdXRGaWVsZC52YWwoKTtcclxuICAgICAgICAgICAgICAgIGlmIChkYXRlcyAmJiB0aGlzLm8ubXVsdGlkYXRlKVxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGVzID0gZGF0ZXMuc3BsaXQodGhpcy5vLm11bHRpZGF0ZVNlcGFyYXRvcik7XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0ZXMgPSBbZGF0ZXNdO1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuZWxlbWVudC5kYXRhKCkuZGF0ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZGF0ZXMgPSAkLm1hcChkYXRlcywgJC5wcm94eShmdW5jdGlvbihkYXRlKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiBEUEdsb2JhbC5wYXJzZURhdGUoZGF0ZSwgdGhpcy5vLmZvcm1hdCwgdGhpcy5vLmxhbmd1YWdlLCB0aGlzLm8uYXNzdW1lTmVhcmJ5WWVhcik7XHJcbiAgICAgICAgICAgIH0sIHRoaXMpKTtcclxuICAgICAgICAgICAgZGF0ZXMgPSAkLmdyZXAoZGF0ZXMsICQucHJveHkoZnVuY3Rpb24oZGF0ZSl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgICF0aGlzLmRhdGVXaXRoaW5SYW5nZShkYXRlKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICFkYXRlXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9LCB0aGlzKSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0ZXMucmVwbGFjZShkYXRlcyk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vLnVwZGF0ZVZpZXdEYXRlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kYXRlcy5sZW5ndGgpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3RGF0ZSA9IG5ldyBEYXRlKHRoaXMuZGF0ZXMuZ2V0KC0xKSk7XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLnZpZXdEYXRlIDwgdGhpcy5vLnN0YXJ0RGF0ZSlcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdEYXRlID0gbmV3IERhdGUodGhpcy5vLnN0YXJ0RGF0ZSk7XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLnZpZXdEYXRlID4gdGhpcy5vLmVuZERhdGUpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3RGF0ZSA9IG5ldyBEYXRlKHRoaXMuby5lbmREYXRlKTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdEYXRlID0gdGhpcy5vLmRlZmF1bHRWaWV3RGF0ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGZyb21BcmdzKXtcclxuICAgICAgICAgICAgICAgIC8vIHNldHRpbmcgZGF0ZSBieSBjbGlja2luZ1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LmNoYW5nZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuZGF0ZXMubGVuZ3RoKXtcclxuICAgICAgICAgICAgICAgIC8vIHNldHRpbmcgZGF0ZSBieSB0eXBpbmdcclxuICAgICAgICAgICAgICAgIGlmIChTdHJpbmcob2xkRGF0ZXMpICE9PSBTdHJpbmcodGhpcy5kYXRlcykgJiYgZnJvbUFyZ3MpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90cmlnZ2VyKCdjaGFuZ2VEYXRlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LmNoYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5kYXRlcy5sZW5ndGggJiYgb2xkRGF0ZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90cmlnZ2VyKCdjbGVhckRhdGUnKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5jaGFuZ2UoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5maWxsKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGZpbGxEb3c6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm8uc2hvd1dlZWtEYXlzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZG93Q250ID0gdGhpcy5vLndlZWtTdGFydCxcclxuICAgICAgICAgICAgICAgICAgICBodG1sID0gJzx0cj4nO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuby5jYWxlbmRhcldlZWtzKXtcclxuICAgICAgICAgICAgICAgICAgICBodG1sICs9ICc8dGggY2xhc3M9XCJjd1wiPiYjMTYwOzwvdGg+JztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHdoaWxlIChkb3dDbnQgPCB0aGlzLm8ud2Vla1N0YXJ0ICsgNyl7XHJcbiAgICAgICAgICAgICAgICAgICAgaHRtbCArPSAnPHRoIGNsYXNzPVwiZG93JztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJC5pbkFycmF5KGRvd0NudCwgdGhpcy5vLmRheXNPZldlZWtEaXNhYmxlZCkgIT09IC0xKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBodG1sICs9ICcgZGlzYWJsZWQnO1xyXG4gICAgICAgICAgICAgICAgICAgIGh0bWwgKz0gJ1wiPicrZGF0ZXNbdGhpcy5vLmxhbmd1YWdlXS5kYXlzTWluWyhkb3dDbnQrKyklN10rJzwvdGg+JztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGh0bWwgKz0gJzwvdHI+JztcclxuICAgICAgICAgICAgICAgIHRoaXMucGlja2VyLmZpbmQoJy5kYXRlcGlja2VyLWRheXMgdGhlYWQnKS5hcHBlbmQoaHRtbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBmaWxsTW9udGhzOiBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICB2YXIgbG9jYWxEYXRlID0gdGhpcy5fdXRjX3RvX2xvY2FsKHRoaXMudmlld0RhdGUpO1xyXG4gICAgICAgICAgICB2YXIgaHRtbCA9ICcnO1xyXG4gICAgICAgICAgICB2YXIgZm9jdXNlZDtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxMjsgaSsrKXtcclxuICAgICAgICAgICAgICAgIGZvY3VzZWQgPSBsb2NhbERhdGUgJiYgbG9jYWxEYXRlLmdldE1vbnRoKCkgPT09IGkgPyAnIGZvY3VzZWQnIDogJyc7XHJcbiAgICAgICAgICAgICAgICBodG1sICs9ICc8c3BhbiBjbGFzcz1cIm1vbnRoJyArIGZvY3VzZWQgKyAnXCI+JyArIGRhdGVzW3RoaXMuby5sYW5ndWFnZV0ubW9udGhzU2hvcnRbaV0gKyAnPC9zcGFuPic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5waWNrZXIuZmluZCgnLmRhdGVwaWNrZXItbW9udGhzIHRkJykuaHRtbChodG1sKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzZXRSYW5nZTogZnVuY3Rpb24ocmFuZ2Upe1xyXG4gICAgICAgICAgICBpZiAoIXJhbmdlIHx8ICFyYW5nZS5sZW5ndGgpXHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5yYW5nZTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgdGhpcy5yYW5nZSA9ICQubWFwKHJhbmdlLCBmdW5jdGlvbihkKXtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC52YWx1ZU9mKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5maWxsKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0Q2xhc3NOYW1lczogZnVuY3Rpb24oZGF0ZSl7XHJcbiAgICAgICAgICAgIHZhciBjbHMgPSBbXSxcclxuICAgICAgICAgICAgICAgIHllYXIgPSB0aGlzLnZpZXdEYXRlLmdldFVUQ0Z1bGxZZWFyKCksXHJcbiAgICAgICAgICAgICAgICBtb250aCA9IHRoaXMudmlld0RhdGUuZ2V0VVRDTW9udGgoKSxcclxuICAgICAgICAgICAgICAgIHRvZGF5ID0gVVRDVG9kYXkoKTtcclxuICAgICAgICAgICAgaWYgKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSA8IHllYXIgfHwgKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSA9PT0geWVhciAmJiBkYXRlLmdldFVUQ01vbnRoKCkgPCBtb250aCkpe1xyXG4gICAgICAgICAgICAgICAgY2xzLnB1c2goJ29sZCcpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSA+IHllYXIgfHwgKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSA9PT0geWVhciAmJiBkYXRlLmdldFVUQ01vbnRoKCkgPiBtb250aCkpe1xyXG4gICAgICAgICAgICAgICAgY2xzLnB1c2goJ25ldycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmZvY3VzRGF0ZSAmJiBkYXRlLnZhbHVlT2YoKSA9PT0gdGhpcy5mb2N1c0RhdGUudmFsdWVPZigpKVxyXG4gICAgICAgICAgICAgICAgY2xzLnB1c2goJ2ZvY3VzZWQnKTtcclxuICAgICAgICAgICAgLy8gQ29tcGFyZSBpbnRlcm5hbCBVVEMgZGF0ZSB3aXRoIFVUQyB0b2RheSwgbm90IGxvY2FsIHRvZGF5XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm8udG9kYXlIaWdobGlnaHQgJiYgaXNVVENFcXVhbHMoZGF0ZSwgdG9kYXkpKSB7XHJcbiAgICAgICAgICAgICAgICBjbHMucHVzaCgndG9kYXknKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5kYXRlcy5jb250YWlucyhkYXRlKSAhPT0gLTEpXHJcbiAgICAgICAgICAgICAgICBjbHMucHVzaCgnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5kYXRlV2l0aGluUmFuZ2UoZGF0ZSkpe1xyXG4gICAgICAgICAgICAgICAgY2xzLnB1c2goJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuZGF0ZUlzRGlzYWJsZWQoZGF0ZSkpe1xyXG4gICAgICAgICAgICAgICAgY2xzLnB1c2goJ2Rpc2FibGVkJywgJ2Rpc2FibGVkLWRhdGUnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoJC5pbkFycmF5KGRhdGUuZ2V0VVRDRGF5KCksIHRoaXMuby5kYXlzT2ZXZWVrSGlnaGxpZ2h0ZWQpICE9PSAtMSl7XHJcbiAgICAgICAgICAgICAgICBjbHMucHVzaCgnaGlnaGxpZ2h0ZWQnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMucmFuZ2Upe1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGUgPiB0aGlzLnJhbmdlWzBdICYmIGRhdGUgPCB0aGlzLnJhbmdlW3RoaXMucmFuZ2UubGVuZ3RoLTFdKXtcclxuICAgICAgICAgICAgICAgICAgICBjbHMucHVzaCgncmFuZ2UnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICgkLmluQXJyYXkoZGF0ZS52YWx1ZU9mKCksIHRoaXMucmFuZ2UpICE9PSAtMSl7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xzLnB1c2goJ3NlbGVjdGVkJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0ZS52YWx1ZU9mKCkgPT09IHRoaXMucmFuZ2VbMF0pe1xyXG4gICAgICAgICAgICAgICAgICAgIGNscy5wdXNoKCdyYW5nZS1zdGFydCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGUudmFsdWVPZigpID09PSB0aGlzLnJhbmdlW3RoaXMucmFuZ2UubGVuZ3RoLTFdKXtcclxuICAgICAgICAgICAgICAgICAgICBjbHMucHVzaCgncmFuZ2UtZW5kJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGNscztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfZmlsbF95ZWFyc1ZpZXc6IGZ1bmN0aW9uKHNlbGVjdG9yLCBjc3NDbGFzcywgZmFjdG9yLCB5ZWFyLCBzdGFydFllYXIsIGVuZFllYXIsIGJlZm9yZUZuKXtcclxuICAgICAgICAgICAgdmFyIGh0bWwgPSAnJztcclxuICAgICAgICAgICAgdmFyIHN0ZXAgPSBmYWN0b3IgLyAxMDtcclxuICAgICAgICAgICAgdmFyIHZpZXcgPSB0aGlzLnBpY2tlci5maW5kKHNlbGVjdG9yKTtcclxuICAgICAgICAgICAgdmFyIHN0YXJ0VmFsID0gTWF0aC5mbG9vcih5ZWFyIC8gZmFjdG9yKSAqIGZhY3RvcjtcclxuICAgICAgICAgICAgdmFyIGVuZFZhbCA9IHN0YXJ0VmFsICsgc3RlcCAqIDk7XHJcbiAgICAgICAgICAgIHZhciBmb2N1c2VkVmFsID0gTWF0aC5mbG9vcih0aGlzLnZpZXdEYXRlLmdldEZ1bGxZZWFyKCkgLyBzdGVwKSAqIHN0ZXA7XHJcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZCA9ICQubWFwKHRoaXMuZGF0ZXMsIGZ1bmN0aW9uKGQpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoZC5nZXRVVENGdWxsWWVhcigpIC8gc3RlcCkgKiBzdGVwO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHZhciBjbGFzc2VzLCB0b29sdGlwLCBiZWZvcmU7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGN1cnJWYWwgPSBzdGFydFZhbCAtIHN0ZXA7IGN1cnJWYWwgPD0gZW5kVmFsICsgc3RlcDsgY3VyclZhbCArPSBzdGVwKSB7XHJcbiAgICAgICAgICAgICAgICBjbGFzc2VzID0gW2Nzc0NsYXNzXTtcclxuICAgICAgICAgICAgICAgIHRvb2x0aXAgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjdXJyVmFsID09PSBzdGFydFZhbCAtIHN0ZXApIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc2VzLnB1c2goJ29sZCcpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJyVmFsID09PSBlbmRWYWwgKyBzdGVwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKCduZXcnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICgkLmluQXJyYXkoY3VyclZhbCwgc2VsZWN0ZWQpICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzZXMucHVzaCgnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VyclZhbCA8IHN0YXJ0WWVhciB8fCBjdXJyVmFsID4gZW5kWWVhcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzZXMucHVzaCgnZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChjdXJyVmFsID09PSBmb2N1c2VkVmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKCdmb2N1c2VkJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGJlZm9yZUZuICE9PSAkLm5vb3ApIHtcclxuICAgICAgICAgICAgICAgICAgICBiZWZvcmUgPSBiZWZvcmVGbihuZXcgRGF0ZShjdXJyVmFsLCAwLCAxKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJlZm9yZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlZm9yZSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGJlZm9yZSA9PT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlZm9yZSA9IHtlbmFibGVkOiBiZWZvcmV9O1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGJlZm9yZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmVmb3JlID0ge2NsYXNzZXM6IGJlZm9yZX07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChiZWZvcmUuZW5hYmxlZCA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoYmVmb3JlLmNsYXNzZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NlcyA9IGNsYXNzZXMuY29uY2F0KGJlZm9yZS5jbGFzc2VzLnNwbGl0KC9cXHMrLykpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoYmVmb3JlLnRvb2x0aXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcCA9IGJlZm9yZS50b29sdGlwO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBodG1sICs9ICc8c3BhbiBjbGFzcz1cIicgKyBjbGFzc2VzLmpvaW4oJyAnKSArICdcIicgKyAodG9vbHRpcCA/ICcgdGl0bGU9XCInICsgdG9vbHRpcCArICdcIicgOiAnJykgKyAnPicgKyBjdXJyVmFsICsgJzwvc3Bhbj4nO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2aWV3LmZpbmQoJy5kYXRlcGlja2VyLXN3aXRjaCcpLnRleHQoc3RhcnRWYWwgKyAnLScgKyBlbmRWYWwpO1xyXG4gICAgICAgICAgICB2aWV3LmZpbmQoJ3RkJykuaHRtbChodG1sKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBmaWxsOiBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICB2YXIgZCA9IG5ldyBEYXRlKHRoaXMudmlld0RhdGUpLFxyXG4gICAgICAgICAgICAgICAgeWVhciA9IGQuZ2V0VVRDRnVsbFllYXIoKSxcclxuICAgICAgICAgICAgICAgIG1vbnRoID0gZC5nZXRVVENNb250aCgpLFxyXG4gICAgICAgICAgICAgICAgc3RhcnRZZWFyID0gdGhpcy5vLnN0YXJ0RGF0ZSAhPT0gLUluZmluaXR5ID8gdGhpcy5vLnN0YXJ0RGF0ZS5nZXRVVENGdWxsWWVhcigpIDogLUluZmluaXR5LFxyXG4gICAgICAgICAgICAgICAgc3RhcnRNb250aCA9IHRoaXMuby5zdGFydERhdGUgIT09IC1JbmZpbml0eSA/IHRoaXMuby5zdGFydERhdGUuZ2V0VVRDTW9udGgoKSA6IC1JbmZpbml0eSxcclxuICAgICAgICAgICAgICAgIGVuZFllYXIgPSB0aGlzLm8uZW5kRGF0ZSAhPT0gSW5maW5pdHkgPyB0aGlzLm8uZW5kRGF0ZS5nZXRVVENGdWxsWWVhcigpIDogSW5maW5pdHksXHJcbiAgICAgICAgICAgICAgICBlbmRNb250aCA9IHRoaXMuby5lbmREYXRlICE9PSBJbmZpbml0eSA/IHRoaXMuby5lbmREYXRlLmdldFVUQ01vbnRoKCkgOiBJbmZpbml0eSxcclxuICAgICAgICAgICAgICAgIHRvZGF5dHh0ID0gZGF0ZXNbdGhpcy5vLmxhbmd1YWdlXS50b2RheSB8fCBkYXRlc1snZW4nXS50b2RheSB8fCAnJyxcclxuICAgICAgICAgICAgICAgIGNsZWFydHh0ID0gZGF0ZXNbdGhpcy5vLmxhbmd1YWdlXS5jbGVhciB8fCBkYXRlc1snZW4nXS5jbGVhciB8fCAnJyxcclxuICAgICAgICAgICAgICAgIHRpdGxlRm9ybWF0ID0gZGF0ZXNbdGhpcy5vLmxhbmd1YWdlXS50aXRsZUZvcm1hdCB8fCBkYXRlc1snZW4nXS50aXRsZUZvcm1hdCxcclxuICAgICAgICAgICAgICAgIHRvb2x0aXAsXHJcbiAgICAgICAgICAgICAgICBiZWZvcmU7XHJcbiAgICAgICAgICAgIGlmIChpc05hTih5ZWFyKSB8fCBpc05hTihtb250aCkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIHRoaXMucGlja2VyLmZpbmQoJy5kYXRlcGlja2VyLWRheXMgLmRhdGVwaWNrZXItc3dpdGNoJylcclxuICAgICAgICAgICAgICAgIC50ZXh0KERQR2xvYmFsLmZvcm1hdERhdGUoZCwgdGl0bGVGb3JtYXQsIHRoaXMuby5sYW5ndWFnZSkpO1xyXG4gICAgICAgICAgICB0aGlzLnBpY2tlci5maW5kKCd0Zm9vdCAudG9kYXknKVxyXG4gICAgICAgICAgICAgICAgLnRleHQodG9kYXl0eHQpXHJcbiAgICAgICAgICAgICAgICAuY3NzKCdkaXNwbGF5JywgdGhpcy5vLnRvZGF5QnRuID09PSB0cnVlIHx8IHRoaXMuby50b2RheUJ0biA9PT0gJ2xpbmtlZCcgPyAndGFibGUtY2VsbCcgOiAnbm9uZScpO1xyXG4gICAgICAgICAgICB0aGlzLnBpY2tlci5maW5kKCd0Zm9vdCAuY2xlYXInKVxyXG4gICAgICAgICAgICAgICAgLnRleHQoY2xlYXJ0eHQpXHJcbiAgICAgICAgICAgICAgICAuY3NzKCdkaXNwbGF5JywgdGhpcy5vLmNsZWFyQnRuID09PSB0cnVlID8gJ3RhYmxlLWNlbGwnIDogJ25vbmUnKTtcclxuICAgICAgICAgICAgdGhpcy5waWNrZXIuZmluZCgndGhlYWQgLmRhdGVwaWNrZXItdGl0bGUnKVxyXG4gICAgICAgICAgICAgICAgLnRleHQodGhpcy5vLnRpdGxlKVxyXG4gICAgICAgICAgICAgICAgLmNzcygnZGlzcGxheScsIHR5cGVvZiB0aGlzLm8udGl0bGUgPT09ICdzdHJpbmcnICYmIHRoaXMuby50aXRsZSAhPT0gJycgPyAndGFibGUtY2VsbCcgOiAnbm9uZScpO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZU5hdkFycm93cygpO1xyXG4gICAgICAgICAgICB0aGlzLmZpbGxNb250aHMoKTtcclxuICAgICAgICAgICAgdmFyIHByZXZNb250aCA9IFVUQ0RhdGUoeWVhciwgbW9udGgsIDApLFxyXG4gICAgICAgICAgICAgICAgZGF5ID0gcHJldk1vbnRoLmdldFVUQ0RhdGUoKTtcclxuICAgICAgICAgICAgcHJldk1vbnRoLnNldFVUQ0RhdGUoZGF5IC0gKHByZXZNb250aC5nZXRVVENEYXkoKSAtIHRoaXMuby53ZWVrU3RhcnQgKyA3KSU3KTtcclxuICAgICAgICAgICAgdmFyIG5leHRNb250aCA9IG5ldyBEYXRlKHByZXZNb250aCk7XHJcbiAgICAgICAgICAgIGlmIChwcmV2TW9udGguZ2V0VVRDRnVsbFllYXIoKSA8IDEwMCl7XHJcbiAgICAgICAgICAgICAgICBuZXh0TW9udGguc2V0VVRDRnVsbFllYXIocHJldk1vbnRoLmdldFVUQ0Z1bGxZZWFyKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG5leHRNb250aC5zZXRVVENEYXRlKG5leHRNb250aC5nZXRVVENEYXRlKCkgKyA0Mik7XHJcbiAgICAgICAgICAgIG5leHRNb250aCA9IG5leHRNb250aC52YWx1ZU9mKCk7XHJcbiAgICAgICAgICAgIHZhciBodG1sID0gW107XHJcbiAgICAgICAgICAgIHZhciB3ZWVrRGF5LCBjbHNOYW1lO1xyXG4gICAgICAgICAgICB3aGlsZSAocHJldk1vbnRoLnZhbHVlT2YoKSA8IG5leHRNb250aCl7XHJcbiAgICAgICAgICAgICAgICB3ZWVrRGF5ID0gcHJldk1vbnRoLmdldFVUQ0RheSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHdlZWtEYXkgPT09IHRoaXMuby53ZWVrU3RhcnQpe1xyXG4gICAgICAgICAgICAgICAgICAgIGh0bWwucHVzaCgnPHRyPicpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm8uY2FsZW5kYXJXZWVrcyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElTTyA4NjAxOiBGaXJzdCB3ZWVrIGNvbnRhaW5zIGZpcnN0IHRodXJzZGF5LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJU08gYWxzbyBzdGF0ZXMgd2VlayBzdGFydHMgb24gTW9uZGF5LCBidXQgd2UgY2FuIGJlIG1vcmUgYWJzdHJhY3QgaGVyZS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTdGFydCBvZiBjdXJyZW50IHdlZWs6IGJhc2VkIG9uIHdlZWtzdGFydC9jdXJyZW50IGRhdGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdzID0gbmV3IERhdGUoK3ByZXZNb250aCArICh0aGlzLm8ud2Vla1N0YXJ0IC0gd2Vla0RheSAtIDcpICUgNyAqIDg2NGU1KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRodXJzZGF5IG9mIHRoaXMgd2Vla1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGggPSBuZXcgRGF0ZShOdW1iZXIod3MpICsgKDcgKyA0IC0gd3MuZ2V0VVRDRGF5KCkpICUgNyAqIDg2NGU1KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZpcnN0IFRodXJzZGF5IG9mIHllYXIsIHllYXIgZnJvbSB0aHVyc2RheVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeXRoID0gbmV3IERhdGUoTnVtYmVyKHl0aCA9IFVUQ0RhdGUodGguZ2V0VVRDRnVsbFllYXIoKSwgMCwgMSkpICsgKDcgKyA0IC0geXRoLmdldFVUQ0RheSgpKSAlIDcgKiA4NjRlNSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDYWxlbmRhciB3ZWVrOiBtcyBiZXR3ZWVuIHRodXJzZGF5cywgZGl2IG1zIHBlciBkYXksIGRpdiA3IGRheXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbFdlZWsgPSAodGggLSB5dGgpIC8gODY0ZTUgLyA3ICsgMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbC5wdXNoKCc8dGQgY2xhc3M9XCJjd1wiPicrIGNhbFdlZWsgKyc8L3RkPicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNsc05hbWUgPSB0aGlzLmdldENsYXNzTmFtZXMocHJldk1vbnRoKTtcclxuICAgICAgICAgICAgICAgIGNsc05hbWUucHVzaCgnZGF5Jyk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSBwcmV2TW9udGguZ2V0VVRDRGF0ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm8uYmVmb3JlU2hvd0RheSAhPT0gJC5ub29wKXtcclxuICAgICAgICAgICAgICAgICAgICBiZWZvcmUgPSB0aGlzLm8uYmVmb3JlU2hvd0RheSh0aGlzLl91dGNfdG9fbG9jYWwocHJldk1vbnRoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJlZm9yZSA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmUgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgYmVmb3JlID09PSAnYm9vbGVhbicpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlZm9yZSA9IHtlbmFibGVkOiBiZWZvcmV9O1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBiZWZvcmUgPT09ICdzdHJpbmcnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmUgPSB7Y2xhc3NlczogYmVmb3JlfTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYmVmb3JlLmVuYWJsZWQgPT09IGZhbHNlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbHNOYW1lLnB1c2goJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJlZm9yZS5jbGFzc2VzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbHNOYW1lID0gY2xzTmFtZS5jb25jYXQoYmVmb3JlLmNsYXNzZXMuc3BsaXQoL1xccysvKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJlZm9yZS50b29sdGlwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b29sdGlwID0gYmVmb3JlLnRvb2x0aXA7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJlZm9yZS5jb250ZW50KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gYmVmb3JlLmNvbnRlbnQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy9DaGVjayBpZiB1bmlxdWVTb3J0IGV4aXN0cyAoc3VwcG9ydGVkIGJ5IGpxdWVyeSA+PTEuMTIgYW5kID49Mi4yKVxyXG4gICAgICAgICAgICAgICAgLy9GYWxsYmFjayB0byB1bmlxdWUgZnVuY3Rpb24gZm9yIG9sZGVyIGpxdWVyeSB2ZXJzaW9uc1xyXG4gICAgICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbigkLnVuaXF1ZVNvcnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xzTmFtZSA9ICQudW5pcXVlU29ydChjbHNOYW1lKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xzTmFtZSA9ICQudW5pcXVlKGNsc05hbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGh0bWwucHVzaCgnPHRkIGNsYXNzPVwiJytjbHNOYW1lLmpvaW4oJyAnKSsnXCInICsgKHRvb2x0aXAgPyAnIHRpdGxlPVwiJyt0b29sdGlwKydcIicgOiAnJykgKyAnIGRhdGEtZGF0ZT1cIicgKyBwcmV2TW9udGguZ2V0VGltZSgpLnRvU3RyaW5nKCkgKyAnXCI+JyArIGNvbnRlbnQgKyAnPC90ZD4nKTtcclxuICAgICAgICAgICAgICAgIHRvb2x0aXAgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgaWYgKHdlZWtEYXkgPT09IHRoaXMuby53ZWVrRW5kKXtcclxuICAgICAgICAgICAgICAgICAgICBodG1sLnB1c2goJzwvdHI+Jyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBwcmV2TW9udGguc2V0VVRDRGF0ZShwcmV2TW9udGguZ2V0VVRDRGF0ZSgpICsgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5waWNrZXIuZmluZCgnLmRhdGVwaWNrZXItZGF5cyB0Ym9keScpLmh0bWwoaHRtbC5qb2luKCcnKSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgbW9udGhzVGl0bGUgPSBkYXRlc1t0aGlzLm8ubGFuZ3VhZ2VdLm1vbnRoc1RpdGxlIHx8IGRhdGVzWydlbiddLm1vbnRoc1RpdGxlIHx8ICdNb250aHMnO1xyXG4gICAgICAgICAgICB2YXIgbW9udGhzID0gdGhpcy5waWNrZXIuZmluZCgnLmRhdGVwaWNrZXItbW9udGhzJylcclxuICAgICAgICAgICAgICAgIC5maW5kKCcuZGF0ZXBpY2tlci1zd2l0Y2gnKVxyXG4gICAgICAgICAgICAgICAgLnRleHQodGhpcy5vLm1heFZpZXdNb2RlIDwgMiA/IG1vbnRoc1RpdGxlIDogeWVhcilcclxuICAgICAgICAgICAgICAgIC5lbmQoKVxyXG4gICAgICAgICAgICAgICAgLmZpbmQoJ3Rib2R5IHNwYW4nKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcblxyXG4gICAgICAgICAgICAkLmVhY2godGhpcy5kYXRlcywgZnVuY3Rpb24oaSwgZCl7XHJcbiAgICAgICAgICAgICAgICBpZiAoZC5nZXRVVENGdWxsWWVhcigpID09PSB5ZWFyKVxyXG4gICAgICAgICAgICAgICAgICAgIG1vbnRocy5lcShkLmdldFVUQ01vbnRoKCkpLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoeWVhciA8IHN0YXJ0WWVhciB8fCB5ZWFyID4gZW5kWWVhcil7XHJcbiAgICAgICAgICAgICAgICBtb250aHMuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHllYXIgPT09IHN0YXJ0WWVhcil7XHJcbiAgICAgICAgICAgICAgICBtb250aHMuc2xpY2UoMCwgc3RhcnRNb250aCkuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHllYXIgPT09IGVuZFllYXIpe1xyXG4gICAgICAgICAgICAgICAgbW9udGhzLnNsaWNlKGVuZE1vbnRoKzEpLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vLmJlZm9yZVNob3dNb250aCAhPT0gJC5ub29wKXtcclxuICAgICAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuICAgICAgICAgICAgICAgICQuZWFjaChtb250aHMsIGZ1bmN0aW9uKGksIG1vbnRoKXtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9EYXRlID0gbmV3IERhdGUoeWVhciwgaSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJlZm9yZSA9IHRoYXQuby5iZWZvcmVTaG93TW9udGgobW9EYXRlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYmVmb3JlID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlZm9yZSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBiZWZvcmUgPT09ICdib29sZWFuJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmVmb3JlID0ge2VuYWJsZWQ6IGJlZm9yZX07XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGJlZm9yZSA9PT0gJ3N0cmluZycpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlZm9yZSA9IHtjbGFzc2VzOiBiZWZvcmV9O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChiZWZvcmUuZW5hYmxlZCA9PT0gZmFsc2UgJiYgISQobW9udGgpLmhhc0NsYXNzKCdkaXNhYmxlZCcpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKG1vbnRoKS5hZGRDbGFzcygnZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYmVmb3JlLmNsYXNzZXMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQobW9udGgpLmFkZENsYXNzKGJlZm9yZS5jbGFzc2VzKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYmVmb3JlLnRvb2x0aXApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQobW9udGgpLnByb3AoJ3RpdGxlJywgYmVmb3JlLnRvb2x0aXApO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEdlbmVyYXRpbmcgZGVjYWRlL3llYXJzIHBpY2tlclxyXG4gICAgICAgICAgICB0aGlzLl9maWxsX3llYXJzVmlldyhcclxuICAgICAgICAgICAgICAgICcuZGF0ZXBpY2tlci15ZWFycycsXHJcbiAgICAgICAgICAgICAgICAneWVhcicsXHJcbiAgICAgICAgICAgICAgICAxMCxcclxuICAgICAgICAgICAgICAgIHllYXIsXHJcbiAgICAgICAgICAgICAgICBzdGFydFllYXIsXHJcbiAgICAgICAgICAgICAgICBlbmRZZWFyLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5vLmJlZm9yZVNob3dZZWFyXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAvLyBHZW5lcmF0aW5nIGNlbnR1cnkvZGVjYWRlcyBwaWNrZXJcclxuICAgICAgICAgICAgdGhpcy5fZmlsbF95ZWFyc1ZpZXcoXHJcbiAgICAgICAgICAgICAgICAnLmRhdGVwaWNrZXItZGVjYWRlcycsXHJcbiAgICAgICAgICAgICAgICAnZGVjYWRlJyxcclxuICAgICAgICAgICAgICAgIDEwMCxcclxuICAgICAgICAgICAgICAgIHllYXIsXHJcbiAgICAgICAgICAgICAgICBzdGFydFllYXIsXHJcbiAgICAgICAgICAgICAgICBlbmRZZWFyLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5vLmJlZm9yZVNob3dEZWNhZGVcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEdlbmVyYXRpbmcgbWlsbGVubml1bS9jZW50dXJpZXMgcGlja2VyXHJcbiAgICAgICAgICAgIHRoaXMuX2ZpbGxfeWVhcnNWaWV3KFxyXG4gICAgICAgICAgICAgICAgJy5kYXRlcGlja2VyLWNlbnR1cmllcycsXHJcbiAgICAgICAgICAgICAgICAnY2VudHVyeScsXHJcbiAgICAgICAgICAgICAgICAxMDAwLFxyXG4gICAgICAgICAgICAgICAgeWVhcixcclxuICAgICAgICAgICAgICAgIHN0YXJ0WWVhcixcclxuICAgICAgICAgICAgICAgIGVuZFllYXIsXHJcbiAgICAgICAgICAgICAgICB0aGlzLm8uYmVmb3JlU2hvd0NlbnR1cnlcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB1cGRhdGVOYXZBcnJvd3M6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fYWxsb3dfdXBkYXRlKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgdmFyIGQgPSBuZXcgRGF0ZSh0aGlzLnZpZXdEYXRlKSxcclxuICAgICAgICAgICAgICAgIHllYXIgPSBkLmdldFVUQ0Z1bGxZZWFyKCksXHJcbiAgICAgICAgICAgICAgICBtb250aCA9IGQuZ2V0VVRDTW9udGgoKSxcclxuICAgICAgICAgICAgICAgIHN0YXJ0WWVhciA9IHRoaXMuby5zdGFydERhdGUgIT09IC1JbmZpbml0eSA/IHRoaXMuby5zdGFydERhdGUuZ2V0VVRDRnVsbFllYXIoKSA6IC1JbmZpbml0eSxcclxuICAgICAgICAgICAgICAgIHN0YXJ0TW9udGggPSB0aGlzLm8uc3RhcnREYXRlICE9PSAtSW5maW5pdHkgPyB0aGlzLm8uc3RhcnREYXRlLmdldFVUQ01vbnRoKCkgOiAtSW5maW5pdHksXHJcbiAgICAgICAgICAgICAgICBlbmRZZWFyID0gdGhpcy5vLmVuZERhdGUgIT09IEluZmluaXR5ID8gdGhpcy5vLmVuZERhdGUuZ2V0VVRDRnVsbFllYXIoKSA6IEluZmluaXR5LFxyXG4gICAgICAgICAgICAgICAgZW5kTW9udGggPSB0aGlzLm8uZW5kRGF0ZSAhPT0gSW5maW5pdHkgPyB0aGlzLm8uZW5kRGF0ZS5nZXRVVENNb250aCgpIDogSW5maW5pdHksXHJcbiAgICAgICAgICAgICAgICBwcmV2SXNEaXNhYmxlZCxcclxuICAgICAgICAgICAgICAgIG5leHRJc0Rpc2FibGVkLFxyXG4gICAgICAgICAgICAgICAgZmFjdG9yID0gMTtcclxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLnZpZXdNb2RlKXtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBwcmV2SXNEaXNhYmxlZCA9IHllYXIgPD0gc3RhcnRZZWFyICYmIG1vbnRoIDw9IHN0YXJ0TW9udGg7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dElzRGlzYWJsZWQgPSB5ZWFyID49IGVuZFllYXIgJiYgbW9udGggPj0gZW5kTW9udGg7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgZmFjdG9yICo9IDEwO1xyXG4gICAgICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgIGZhY3RvciAqPSAxMDtcclxuICAgICAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICBmYWN0b3IgKj0gMTA7XHJcbiAgICAgICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgcHJldklzRGlzYWJsZWQgPSBNYXRoLmZsb29yKHllYXIgLyBmYWN0b3IpICogZmFjdG9yIDw9IHN0YXJ0WWVhcjtcclxuICAgICAgICAgICAgICAgICAgICBuZXh0SXNEaXNhYmxlZCA9IE1hdGguZmxvb3IoeWVhciAvIGZhY3RvcikgKiBmYWN0b3IgKyBmYWN0b3IgPj0gZW5kWWVhcjtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5waWNrZXIuZmluZCgnLnByZXYnKS50b2dnbGVDbGFzcygnZGlzYWJsZWQnLCBwcmV2SXNEaXNhYmxlZCk7XHJcbiAgICAgICAgICAgIHRoaXMucGlja2VyLmZpbmQoJy5uZXh0JykudG9nZ2xlQ2xhc3MoJ2Rpc2FibGVkJywgbmV4dElzRGlzYWJsZWQpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGNsaWNrOiBmdW5jdGlvbihlKXtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHRhcmdldCwgZGlyLCBkYXksIHllYXIsIG1vbnRoO1xyXG4gICAgICAgICAgICB0YXJnZXQgPSAkKGUudGFyZ2V0KTtcclxuXHJcbiAgICAgICAgICAgIC8vIENsaWNrZWQgb24gdGhlIHN3aXRjaFxyXG4gICAgICAgICAgICBpZiAodGFyZ2V0Lmhhc0NsYXNzKCdkYXRlcGlja2VyLXN3aXRjaCcpICYmIHRoaXMudmlld01vZGUgIT09IHRoaXMuby5tYXhWaWV3TW9kZSl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFZpZXdNb2RlKHRoaXMudmlld01vZGUgKyAxKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gQ2xpY2tlZCBvbiB0b2RheSBidXR0b25cclxuICAgICAgICAgICAgaWYgKHRhcmdldC5oYXNDbGFzcygndG9kYXknKSAmJiAhdGFyZ2V0Lmhhc0NsYXNzKCdkYXknKSl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFZpZXdNb2RlKDApO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0RGF0ZShVVENUb2RheSgpLCB0aGlzLm8udG9kYXlCdG4gPT09ICdsaW5rZWQnID8gbnVsbCA6ICd2aWV3Jyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIENsaWNrZWQgb24gY2xlYXIgYnV0dG9uXHJcbiAgICAgICAgICAgIGlmICh0YXJnZXQuaGFzQ2xhc3MoJ2NsZWFyJykpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhckRhdGVzKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghdGFyZ2V0Lmhhc0NsYXNzKCdkaXNhYmxlZCcpKXtcclxuICAgICAgICAgICAgICAgIC8vIENsaWNrZWQgb24gYSBtb250aCwgeWVhciwgZGVjYWRlLCBjZW50dXJ5XHJcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0Lmhhc0NsYXNzKCdtb250aCcpXHJcbiAgICAgICAgICAgICAgICAgICAgfHwgdGFyZ2V0Lmhhc0NsYXNzKCd5ZWFyJylcclxuICAgICAgICAgICAgICAgICAgICB8fCB0YXJnZXQuaGFzQ2xhc3MoJ2RlY2FkZScpXHJcbiAgICAgICAgICAgICAgICAgICAgfHwgdGFyZ2V0Lmhhc0NsYXNzKCdjZW50dXJ5JykpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdEYXRlLnNldFVUQ0RhdGUoMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGRheSA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudmlld01vZGUgPT09IDEpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb250aCA9IHRhcmdldC5wYXJlbnQoKS5maW5kKCdzcGFuJykuaW5kZXgodGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeWVhciA9IHRoaXMudmlld0RhdGUuZ2V0VVRDRnVsbFllYXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3RGF0ZS5zZXRVVENNb250aChtb250aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9udGggPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB5ZWFyID0gTnVtYmVyKHRhcmdldC50ZXh0KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdEYXRlLnNldFVUQ0Z1bGxZZWFyKHllYXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlcihEUEdsb2JhbC52aWV3TW9kZXNbdGhpcy52aWV3TW9kZSAtIDFdLmUsIHRoaXMudmlld0RhdGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy52aWV3TW9kZSA9PT0gdGhpcy5vLm1pblZpZXdNb2RlKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0RGF0ZShVVENEYXRlKHllYXIsIG1vbnRoLCBkYXkpKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFZpZXdNb2RlKHRoaXMudmlld01vZGUgLSAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maWxsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5waWNrZXIuaXMoJzp2aXNpYmxlJykgJiYgdGhpcy5fZm9jdXNlZF9mcm9tKXtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZvY3VzZWRfZnJvbS5mb2N1cygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9mb2N1c2VkX2Zyb207XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZGF5Q2VsbENsaWNrOiBmdW5jdGlvbihlKXtcclxuICAgICAgICAgICAgdmFyICR0YXJnZXQgPSAkKGUuY3VycmVudFRhcmdldCk7XHJcbiAgICAgICAgICAgIHZhciB0aW1lc3RhbXAgPSAkdGFyZ2V0LmRhdGEoJ2RhdGUnKTtcclxuICAgICAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSh0aW1lc3RhbXApO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuby51cGRhdGVWaWV3RGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSAhPT0gdGhpcy52aWV3RGF0ZS5nZXRVVENGdWxsWWVhcigpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlcignY2hhbmdlWWVhcicsIHRoaXMudmlld0RhdGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChkYXRlLmdldFVUQ01vbnRoKCkgIT09IHRoaXMudmlld0RhdGUuZ2V0VVRDTW9udGgoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyaWdnZXIoJ2NoYW5nZU1vbnRoJywgdGhpcy52aWV3RGF0ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fc2V0RGF0ZShkYXRlKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvLyBDbGlja2VkIG9uIHByZXYgb3IgbmV4dFxyXG4gICAgICAgIG5hdkFycm93c0NsaWNrOiBmdW5jdGlvbihlKXtcclxuICAgICAgICAgICAgdmFyICR0YXJnZXQgPSAkKGUuY3VycmVudFRhcmdldCk7XHJcbiAgICAgICAgICAgIHZhciBkaXIgPSAkdGFyZ2V0Lmhhc0NsYXNzKCdwcmV2JykgPyAtMSA6IDE7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnZpZXdNb2RlICE9PSAwKXtcclxuICAgICAgICAgICAgICAgIGRpciAqPSBEUEdsb2JhbC52aWV3TW9kZXNbdGhpcy52aWV3TW9kZV0ubmF2U3RlcCAqIDEyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMudmlld0RhdGUgPSB0aGlzLm1vdmVNb250aCh0aGlzLnZpZXdEYXRlLCBkaXIpO1xyXG4gICAgICAgICAgICB0aGlzLl90cmlnZ2VyKERQR2xvYmFsLnZpZXdNb2Rlc1t0aGlzLnZpZXdNb2RlXS5lLCB0aGlzLnZpZXdEYXRlKTtcclxuICAgICAgICAgICAgdGhpcy5maWxsKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3RvZ2dsZV9tdWx0aWRhdGU6IGZ1bmN0aW9uKGRhdGUpe1xyXG4gICAgICAgICAgICB2YXIgaXggPSB0aGlzLmRhdGVzLmNvbnRhaW5zKGRhdGUpO1xyXG4gICAgICAgICAgICBpZiAoIWRhdGUpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRlcy5jbGVhcigpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoaXggIT09IC0xKXtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm8ubXVsdGlkYXRlID09PSB0cnVlIHx8IHRoaXMuby5tdWx0aWRhdGUgPiAxIHx8IHRoaXMuby50b2dnbGVBY3RpdmUpe1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0ZXMucmVtb3ZlKGl4KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLm8ubXVsdGlkYXRlID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRlcy5jbGVhcigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRlcy5wdXNoKGRhdGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRlcy5wdXNoKGRhdGUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuby5tdWx0aWRhdGUgPT09ICdudW1iZXInKVxyXG4gICAgICAgICAgICAgICAgd2hpbGUgKHRoaXMuZGF0ZXMubGVuZ3RoID4gdGhpcy5vLm11bHRpZGF0ZSlcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGVzLnJlbW92ZSgwKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfc2V0RGF0ZTogZnVuY3Rpb24oZGF0ZSwgd2hpY2gpe1xyXG4gICAgICAgICAgICBpZiAoIXdoaWNoIHx8IHdoaWNoID09PSAnZGF0ZScpXHJcbiAgICAgICAgICAgICAgICB0aGlzLl90b2dnbGVfbXVsdGlkYXRlKGRhdGUgJiYgbmV3IERhdGUoZGF0ZSkpO1xyXG4gICAgICAgICAgICBpZiAoKCF3aGljaCAmJiB0aGlzLm8udXBkYXRlVmlld0RhdGUpIHx8IHdoaWNoID09PSAndmlldycpXHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdEYXRlID0gZGF0ZSAmJiBuZXcgRGF0ZShkYXRlKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZmlsbCgpO1xyXG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKCk7XHJcbiAgICAgICAgICAgIGlmICghd2hpY2ggfHwgd2hpY2ggIT09ICd2aWV3Jykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlcignY2hhbmdlRGF0ZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuaW5wdXRGaWVsZC50cmlnZ2VyKCdjaGFuZ2UnKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuby5hdXRvY2xvc2UgJiYgKCF3aGljaCB8fCB3aGljaCA9PT0gJ2RhdGUnKSl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG1vdmVEYXk6IGZ1bmN0aW9uKGRhdGUsIGRpcil7XHJcbiAgICAgICAgICAgIHZhciBuZXdEYXRlID0gbmV3IERhdGUoZGF0ZSk7XHJcbiAgICAgICAgICAgIG5ld0RhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSArIGRpcik7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbmV3RGF0ZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBtb3ZlV2VlazogZnVuY3Rpb24oZGF0ZSwgZGlyKXtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubW92ZURheShkYXRlLCBkaXIgKiA3KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBtb3ZlTW9udGg6IGZ1bmN0aW9uKGRhdGUsIGRpcil7XHJcbiAgICAgICAgICAgIGlmICghaXNWYWxpZERhdGUoZGF0ZSkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vLmRlZmF1bHRWaWV3RGF0ZTtcclxuICAgICAgICAgICAgaWYgKCFkaXIpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZTtcclxuICAgICAgICAgICAgdmFyIG5ld19kYXRlID0gbmV3IERhdGUoZGF0ZS52YWx1ZU9mKCkpLFxyXG4gICAgICAgICAgICAgICAgZGF5ID0gbmV3X2RhdGUuZ2V0VVRDRGF0ZSgpLFxyXG4gICAgICAgICAgICAgICAgbW9udGggPSBuZXdfZGF0ZS5nZXRVVENNb250aCgpLFxyXG4gICAgICAgICAgICAgICAgbWFnID0gTWF0aC5hYnMoZGlyKSxcclxuICAgICAgICAgICAgICAgIG5ld19tb250aCwgdGVzdDtcclxuICAgICAgICAgICAgZGlyID0gZGlyID4gMCA/IDEgOiAtMTtcclxuICAgICAgICAgICAgaWYgKG1hZyA9PT0gMSl7XHJcbiAgICAgICAgICAgICAgICB0ZXN0ID0gZGlyID09PSAtMVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIGdvaW5nIGJhY2sgb25lIG1vbnRoLCBtYWtlIHN1cmUgbW9udGggaXMgbm90IGN1cnJlbnQgbW9udGhcclxuICAgICAgICAgICAgICAgICAgICAvLyAoZWcsIE1hciAzMSAtPiBGZWIgMzEgPT0gRmViIDI4LCBub3QgTWFyIDAyKVxyXG4gICAgICAgICAgICAgICAgICAgID8gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ld19kYXRlLmdldFVUQ01vbnRoKCkgPT09IG1vbnRoO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyBJZiBnb2luZyBmb3J3YXJkIG9uZSBtb250aCwgbWFrZSBzdXJlIG1vbnRoIGlzIGFzIGV4cGVjdGVkXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gKGVnLCBKYW4gMzEgLT4gRmViIDMxID09IEZlYiAyOCwgbm90IE1hciAwMilcclxuICAgICAgICAgICAgICAgICAgICA6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXdfZGF0ZS5nZXRVVENNb250aCgpICE9PSBuZXdfbW9udGg7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIG5ld19tb250aCA9IG1vbnRoICsgZGlyO1xyXG4gICAgICAgICAgICAgICAgbmV3X2RhdGUuc2V0VVRDTW9udGgobmV3X21vbnRoKTtcclxuICAgICAgICAgICAgICAgIC8vIERlYyAtPiBKYW4gKDEyKSBvciBKYW4gLT4gRGVjICgtMSkgLS0gbGltaXQgZXhwZWN0ZWQgZGF0ZSB0byAwLTExXHJcbiAgICAgICAgICAgICAgICBuZXdfbW9udGggPSAobmV3X21vbnRoICsgMTIpICUgMTI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBGb3IgbWFnbml0dWRlcyA+MSwgbW92ZSBvbmUgbW9udGggYXQgYSB0aW1lLi4uXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpPTA7IGkgPCBtYWc7IGkrKylcclxuICAgICAgICAgICAgICAgICAgICAvLyAuLi53aGljaCBtaWdodCBkZWNyZWFzZSB0aGUgZGF5IChlZywgSmFuIDMxIHRvIEZlYiAyOCwgZXRjKS4uLlxyXG4gICAgICAgICAgICAgICAgICAgIG5ld19kYXRlID0gdGhpcy5tb3ZlTW9udGgobmV3X2RhdGUsIGRpcik7XHJcbiAgICAgICAgICAgICAgICAvLyAuLi50aGVuIHJlc2V0IHRoZSBkYXksIGtlZXBpbmcgaXQgaW4gdGhlIG5ldyBtb250aFxyXG4gICAgICAgICAgICAgICAgbmV3X21vbnRoID0gbmV3X2RhdGUuZ2V0VVRDTW9udGgoKTtcclxuICAgICAgICAgICAgICAgIG5ld19kYXRlLnNldFVUQ0RhdGUoZGF5KTtcclxuICAgICAgICAgICAgICAgIHRlc3QgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXdfbW9udGggIT09IG5ld19kYXRlLmdldFVUQ01vbnRoKCk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIENvbW1vbiBkYXRlLXJlc2V0dGluZyBsb29wIC0tIGlmIGRhdGUgaXMgYmV5b25kIGVuZCBvZiBtb250aCwgbWFrZSBpdFxyXG4gICAgICAgICAgICAvLyBlbmQgb2YgbW9udGhcclxuICAgICAgICAgICAgd2hpbGUgKHRlc3QoKSl7XHJcbiAgICAgICAgICAgICAgICBuZXdfZGF0ZS5zZXRVVENEYXRlKC0tZGF5KTtcclxuICAgICAgICAgICAgICAgIG5ld19kYXRlLnNldFVUQ01vbnRoKG5ld19tb250aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG5ld19kYXRlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG1vdmVZZWFyOiBmdW5jdGlvbihkYXRlLCBkaXIpe1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tb3ZlTW9udGgoZGF0ZSwgZGlyKjEyKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBtb3ZlQXZhaWxhYmxlRGF0ZTogZnVuY3Rpb24oZGF0ZSwgZGlyLCBmbil7XHJcbiAgICAgICAgICAgIGRvIHtcclxuICAgICAgICAgICAgICAgIGRhdGUgPSB0aGlzW2ZuXShkYXRlLCBkaXIpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5kYXRlV2l0aGluUmFuZ2UoZGF0ZSkpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIGZuID0gJ21vdmVEYXknO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHdoaWxlICh0aGlzLmRhdGVJc0Rpc2FibGVkKGRhdGUpKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBkYXRlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHdlZWtPZkRhdGVJc0Rpc2FibGVkOiBmdW5jdGlvbihkYXRlKXtcclxuICAgICAgICAgICAgcmV0dXJuICQuaW5BcnJheShkYXRlLmdldFVUQ0RheSgpLCB0aGlzLm8uZGF5c09mV2Vla0Rpc2FibGVkKSAhPT0gLTE7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZGF0ZUlzRGlzYWJsZWQ6IGZ1bmN0aW9uKGRhdGUpe1xyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgdGhpcy53ZWVrT2ZEYXRlSXNEaXNhYmxlZChkYXRlKSB8fFxyXG4gICAgICAgICAgICAgICAgJC5ncmVwKHRoaXMuby5kYXRlc0Rpc2FibGVkLCBmdW5jdGlvbihkKXtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNVVENFcXVhbHMoZGF0ZSwgZCk7XHJcbiAgICAgICAgICAgICAgICB9KS5sZW5ndGggPiAwXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZGF0ZVdpdGhpblJhbmdlOiBmdW5jdGlvbihkYXRlKXtcclxuICAgICAgICAgICAgcmV0dXJuIGRhdGUgPj0gdGhpcy5vLnN0YXJ0RGF0ZSAmJiBkYXRlIDw9IHRoaXMuby5lbmREYXRlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGtleWRvd246IGZ1bmN0aW9uKGUpe1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMucGlja2VyLmlzKCc6dmlzaWJsZScpKXtcclxuICAgICAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT09IDQwIHx8IGUua2V5Q29kZSA9PT0gMjcpIHsgLy8gYWxsb3cgZG93biB0byByZS1zaG93IHBpY2tlclxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGRhdGVDaGFuZ2VkID0gZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBkaXIsIG5ld1ZpZXdEYXRlLFxyXG4gICAgICAgICAgICAgICAgZm9jdXNEYXRlID0gdGhpcy5mb2N1c0RhdGUgfHwgdGhpcy52aWV3RGF0ZTtcclxuICAgICAgICAgICAgc3dpdGNoIChlLmtleUNvZGUpe1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyNzogLy8gZXNjYXBlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZm9jdXNEYXRlKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mb2N1c0RhdGUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdEYXRlID0gdGhpcy5kYXRlcy5nZXQoLTEpIHx8IHRoaXMudmlld0RhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmlsbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzNzogLy8gbGVmdFxyXG4gICAgICAgICAgICAgICAgY2FzZSAzODogLy8gdXBcclxuICAgICAgICAgICAgICAgIGNhc2UgMzk6IC8vIHJpZ2h0XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQwOiAvLyBkb3duXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLm8ua2V5Ym9hcmROYXZpZ2F0aW9uIHx8IHRoaXMuby5kYXlzT2ZXZWVrRGlzYWJsZWQubGVuZ3RoID09PSA3KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBkaXIgPSBlLmtleUNvZGUgPT09IDM3IHx8IGUua2V5Q29kZSA9PT0gMzggPyAtMSA6IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudmlld01vZGUgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUuY3RybEtleSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdWaWV3RGF0ZSA9IHRoaXMubW92ZUF2YWlsYWJsZURhdGUoZm9jdXNEYXRlLCBkaXIsICdtb3ZlWWVhcicpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdWaWV3RGF0ZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90cmlnZ2VyKCdjaGFuZ2VZZWFyJywgdGhpcy52aWV3RGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZS5zaGlmdEtleSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdWaWV3RGF0ZSA9IHRoaXMubW92ZUF2YWlsYWJsZURhdGUoZm9jdXNEYXRlLCBkaXIsICdtb3ZlTW9udGgnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3Vmlld0RhdGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlcignY2hhbmdlTW9udGgnLCB0aGlzLnZpZXdEYXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlLmtleUNvZGUgPT09IDM3IHx8IGUua2V5Q29kZSA9PT0gMzkpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3Vmlld0RhdGUgPSB0aGlzLm1vdmVBdmFpbGFibGVEYXRlKGZvY3VzRGF0ZSwgZGlyLCAnbW92ZURheScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLndlZWtPZkRhdGVJc0Rpc2FibGVkKGZvY3VzRGF0ZSkpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3Vmlld0RhdGUgPSB0aGlzLm1vdmVBdmFpbGFibGVEYXRlKGZvY3VzRGF0ZSwgZGlyLCAnbW92ZVdlZWsnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy52aWV3TW9kZSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5rZXlDb2RlID09PSAzOCB8fCBlLmtleUNvZGUgPT09IDQwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXIgPSBkaXIgKiA0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1ZpZXdEYXRlID0gdGhpcy5tb3ZlQXZhaWxhYmxlRGF0ZShmb2N1c0RhdGUsIGRpciwgJ21vdmVNb250aCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy52aWV3TW9kZSA9PT0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5rZXlDb2RlID09PSAzOCB8fCBlLmtleUNvZGUgPT09IDQwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXIgPSBkaXIgKiA0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1ZpZXdEYXRlID0gdGhpcy5tb3ZlQXZhaWxhYmxlRGF0ZShmb2N1c0RhdGUsIGRpciwgJ21vdmVZZWFyJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXdWaWV3RGF0ZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNEYXRlID0gdGhpcy52aWV3RGF0ZSA9IG5ld1ZpZXdEYXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFZhbHVlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmlsbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxMzogLy8gZW50ZXJcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuby5mb3JjZVBhcnNlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBmb2N1c0RhdGUgPSB0aGlzLmZvY3VzRGF0ZSB8fCB0aGlzLmRhdGVzLmdldCgtMSkgfHwgdGhpcy52aWV3RGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vLmtleWJvYXJkTmF2aWdhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90b2dnbGVfbXVsdGlkYXRlKGZvY3VzRGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVDaGFuZ2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb2N1c0RhdGUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlld0RhdGUgPSB0aGlzLmRhdGVzLmdldCgtMSkgfHwgdGhpcy52aWV3RGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFZhbHVlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maWxsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucGlja2VyLmlzKCc6dmlzaWJsZScpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vLmF1dG9jbG9zZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgOTogLy8gdGFiXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb2N1c0RhdGUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlld0RhdGUgPSB0aGlzLmRhdGVzLmdldCgtMSkgfHwgdGhpcy52aWV3RGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbGwoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZGF0ZUNoYW5nZWQpe1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGF0ZXMubGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyaWdnZXIoJ2NoYW5nZURhdGUnKTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90cmlnZ2VyKCdjbGVhckRhdGUnKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5wdXRGaWVsZC50cmlnZ2VyKCdjaGFuZ2UnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNldFZpZXdNb2RlOiBmdW5jdGlvbih2aWV3TW9kZSl7XHJcbiAgICAgICAgICAgIHRoaXMudmlld01vZGUgPSB2aWV3TW9kZTtcclxuICAgICAgICAgICAgdGhpcy5waWNrZXJcclxuICAgICAgICAgICAgICAgIC5jaGlsZHJlbignZGl2JylcclxuICAgICAgICAgICAgICAgIC5oaWRlKClcclxuICAgICAgICAgICAgICAgIC5maWx0ZXIoJy5kYXRlcGlja2VyLScgKyBEUEdsb2JhbC52aWV3TW9kZXNbdGhpcy52aWV3TW9kZV0uY2xzTmFtZSlcclxuICAgICAgICAgICAgICAgIC5zaG93KCk7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTmF2QXJyb3dzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3RyaWdnZXIoJ2NoYW5nZVZpZXdNb2RlJywgbmV3IERhdGUodGhpcy52aWV3RGF0ZSkpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdmFyIERhdGVSYW5nZVBpY2tlciA9IGZ1bmN0aW9uKGVsZW1lbnQsIG9wdGlvbnMpe1xyXG4gICAgICAgICQuZGF0YShlbGVtZW50LCAnZGF0ZXBpY2tlcicsIHRoaXMpO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudCA9ICQoZWxlbWVudCk7XHJcbiAgICAgICAgdGhpcy5pbnB1dHMgPSAkLm1hcChvcHRpb25zLmlucHV0cywgZnVuY3Rpb24oaSl7XHJcbiAgICAgICAgICAgIHJldHVybiBpLmpxdWVyeSA/IGlbMF0gOiBpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGRlbGV0ZSBvcHRpb25zLmlucHV0cztcclxuXHJcbiAgICAgICAgdGhpcy5rZWVwRW1wdHlWYWx1ZXMgPSBvcHRpb25zLmtlZXBFbXB0eVZhbHVlcztcclxuICAgICAgICBkZWxldGUgb3B0aW9ucy5rZWVwRW1wdHlWYWx1ZXM7XHJcblxyXG4gICAgICAgIGRhdGVwaWNrZXJQbHVnaW4uY2FsbCgkKHRoaXMuaW5wdXRzKSwgb3B0aW9ucylcclxuICAgICAgICAgICAgLm9uKCdjaGFuZ2VEYXRlJywgJC5wcm94eSh0aGlzLmRhdGVVcGRhdGVkLCB0aGlzKSk7XHJcblxyXG4gICAgICAgIHRoaXMucGlja2VycyA9ICQubWFwKHRoaXMuaW5wdXRzLCBmdW5jdGlvbihpKXtcclxuICAgICAgICAgICAgcmV0dXJuICQuZGF0YShpLCAnZGF0ZXBpY2tlcicpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMudXBkYXRlRGF0ZXMoKTtcclxuICAgIH07XHJcbiAgICBEYXRlUmFuZ2VQaWNrZXIucHJvdG90eXBlID0ge1xyXG4gICAgICAgIHVwZGF0ZURhdGVzOiBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICB0aGlzLmRhdGVzID0gJC5tYXAodGhpcy5waWNrZXJzLCBmdW5jdGlvbihpKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpLmdldFVUQ0RhdGUoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlUmFuZ2VzKCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB1cGRhdGVSYW5nZXM6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHZhciByYW5nZSA9ICQubWFwKHRoaXMuZGF0ZXMsIGZ1bmN0aW9uKGQpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQudmFsdWVPZigpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgJC5lYWNoKHRoaXMucGlja2VycywgZnVuY3Rpb24oaSwgcCl7XHJcbiAgICAgICAgICAgICAgICBwLnNldFJhbmdlKHJhbmdlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBkYXRlVXBkYXRlZDogZnVuY3Rpb24oZSl7XHJcbiAgICAgICAgICAgIC8vIGB0aGlzLnVwZGF0aW5nYCBpcyBhIHdvcmthcm91bmQgZm9yIHByZXZlbnRpbmcgaW5maW5pdGUgcmVjdXJzaW9uXHJcbiAgICAgICAgICAgIC8vIGJldHdlZW4gYGNoYW5nZURhdGVgIHRyaWdnZXJpbmcgYW5kIGBzZXRVVENEYXRlYCBjYWxsaW5nLiAgVW50aWxcclxuICAgICAgICAgICAgLy8gdGhlcmUgaXMgYSBiZXR0ZXIgbWVjaGFuaXNtLlxyXG4gICAgICAgICAgICBpZiAodGhpcy51cGRhdGluZylcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGluZyA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICB2YXIgZHAgPSAkLmRhdGEoZS50YXJnZXQsICdkYXRlcGlja2VyJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoZHAgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgbmV3X2RhdGUgPSBkcC5nZXRVVENEYXRlKCksXHJcbiAgICAgICAgICAgICAgICBrZWVwX2VtcHR5X3ZhbHVlcyA9IHRoaXMua2VlcEVtcHR5VmFsdWVzLFxyXG4gICAgICAgICAgICAgICAgaSA9ICQuaW5BcnJheShlLnRhcmdldCwgdGhpcy5pbnB1dHMpLFxyXG4gICAgICAgICAgICAgICAgaiA9IGkgLSAxLFxyXG4gICAgICAgICAgICAgICAgayA9IGkgKyAxLFxyXG4gICAgICAgICAgICAgICAgbCA9IHRoaXMuaW5wdXRzLmxlbmd0aDtcclxuICAgICAgICAgICAgaWYgKGkgPT09IC0xKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgJC5lYWNoKHRoaXMucGlja2VycywgZnVuY3Rpb24oaSwgcCl7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXAuZ2V0VVRDRGF0ZSgpICYmIChwID09PSBkcCB8fCAha2VlcF9lbXB0eV92YWx1ZXMpKVxyXG4gICAgICAgICAgICAgICAgICAgIHAuc2V0VVRDRGF0ZShuZXdfZGF0ZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgaWYgKG5ld19kYXRlIDwgdGhpcy5kYXRlc1tqXSl7XHJcbiAgICAgICAgICAgICAgICAvLyBEYXRlIGJlaW5nIG1vdmVkIGVhcmxpZXIvbGVmdFxyXG4gICAgICAgICAgICAgICAgd2hpbGUgKGogPj0gMCAmJiBuZXdfZGF0ZSA8IHRoaXMuZGF0ZXNbal0pe1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGlja2Vyc1tqLS1dLnNldFVUQ0RhdGUobmV3X2RhdGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5ld19kYXRlID4gdGhpcy5kYXRlc1trXSl7XHJcbiAgICAgICAgICAgICAgICAvLyBEYXRlIGJlaW5nIG1vdmVkIGxhdGVyL3JpZ2h0XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoayA8IGwgJiYgbmV3X2RhdGUgPiB0aGlzLmRhdGVzW2tdKXtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBpY2tlcnNbaysrXS5zZXRVVENEYXRlKG5ld19kYXRlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZURhdGVzKCk7XHJcblxyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy51cGRhdGluZztcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICQubWFwKHRoaXMucGlja2VycywgZnVuY3Rpb24ocCl7IHAuZGVzdHJveSgpOyB9KTtcclxuICAgICAgICAgICAgJCh0aGlzLmlucHV0cykub2ZmKCdjaGFuZ2VEYXRlJywgdGhpcy5kYXRlVXBkYXRlZCk7XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmVsZW1lbnQuZGF0YSgpLmRhdGVwaWNrZXI7XHJcbiAgICAgICAgfSxcclxuICAgICAgICByZW1vdmU6IGFsaWFzKCdkZXN0cm95JywgJ01ldGhvZCBgcmVtb3ZlYCBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdmVyc2lvbiAyLjAuIFVzZSBgZGVzdHJveWAgaW5zdGVhZCcpXHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIG9wdHNfZnJvbV9lbChlbCwgcHJlZml4KXtcclxuICAgICAgICAvLyBEZXJpdmUgb3B0aW9ucyBmcm9tIGVsZW1lbnQgZGF0YS1hdHRyc1xyXG4gICAgICAgIHZhciBkYXRhID0gJChlbCkuZGF0YSgpLFxyXG4gICAgICAgICAgICBvdXQgPSB7fSwgaW5rZXksXHJcbiAgICAgICAgICAgIHJlcGxhY2UgPSBuZXcgUmVnRXhwKCdeJyArIHByZWZpeC50b0xvd2VyQ2FzZSgpICsgJyhbQS1aXSknKTtcclxuICAgICAgICBwcmVmaXggPSBuZXcgUmVnRXhwKCdeJyArIHByZWZpeC50b0xvd2VyQ2FzZSgpKTtcclxuICAgICAgICBmdW5jdGlvbiByZV9sb3dlcihfLGEpe1xyXG4gICAgICAgICAgICByZXR1cm4gYS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSlcclxuICAgICAgICAgICAgaWYgKHByZWZpeC50ZXN0KGtleSkpe1xyXG4gICAgICAgICAgICAgICAgaW5rZXkgPSBrZXkucmVwbGFjZShyZXBsYWNlLCByZV9sb3dlcik7XHJcbiAgICAgICAgICAgICAgICBvdXRbaW5rZXldID0gZGF0YVtrZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBvcHRzX2Zyb21fbG9jYWxlKGxhbmcpe1xyXG4gICAgICAgIC8vIERlcml2ZSBvcHRpb25zIGZyb20gbG9jYWxlIHBsdWdpbnNcclxuICAgICAgICB2YXIgb3V0ID0ge307XHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgXCJkZS1ERVwiIHN0eWxlIGRhdGUgaXMgYXZhaWxhYmxlLCBpZiBub3QgbGFuZ3VhZ2Ugc2hvdWxkXHJcbiAgICAgICAgLy8gZmFsbGJhY2sgdG8gMiBsZXR0ZXIgY29kZSBlZyBcImRlXCJcclxuICAgICAgICBpZiAoIWRhdGVzW2xhbmddKXtcclxuICAgICAgICAgICAgbGFuZyA9IGxhbmcuc3BsaXQoJy0nKVswXTtcclxuICAgICAgICAgICAgaWYgKCFkYXRlc1tsYW5nXSlcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGQgPSBkYXRlc1tsYW5nXTtcclxuICAgICAgICAkLmVhY2gobG9jYWxlX29wdHMsIGZ1bmN0aW9uKGksayl7XHJcbiAgICAgICAgICAgIGlmIChrIGluIGQpXHJcbiAgICAgICAgICAgICAgICBvdXRba10gPSBkW2tdO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIG9sZCA9ICQuZm4uZGF0ZXBpY2tlcjtcclxuICAgIHZhciBkYXRlcGlja2VyUGx1Z2luID0gZnVuY3Rpb24ob3B0aW9uKXtcclxuICAgICAgICB2YXIgYXJncyA9IEFycmF5LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgYXJncy5zaGlmdCgpO1xyXG4gICAgICAgIHZhciBpbnRlcm5hbF9yZXR1cm47XHJcbiAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyksXHJcbiAgICAgICAgICAgICAgICBkYXRhID0gJHRoaXMuZGF0YSgnZGF0ZXBpY2tlcicpLFxyXG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb24gPT09ICdvYmplY3QnICYmIG9wdGlvbjtcclxuICAgICAgICAgICAgaWYgKCFkYXRhKXtcclxuICAgICAgICAgICAgICAgIHZhciBlbG9wdHMgPSBvcHRzX2Zyb21fZWwodGhpcywgJ2RhdGUnKSxcclxuICAgICAgICAgICAgICAgICAgICAvLyBQcmVsaW1pbmFyeSBvdGlvbnNcclxuICAgICAgICAgICAgICAgICAgICB4b3B0cyA9ICQuZXh0ZW5kKHt9LCBkZWZhdWx0cywgZWxvcHRzLCBvcHRpb25zKSxcclxuICAgICAgICAgICAgICAgICAgICBsb2NvcHRzID0gb3B0c19mcm9tX2xvY2FsZSh4b3B0cy5sYW5ndWFnZSksXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gT3B0aW9ucyBwcmlvcml0eToganMgYXJncywgZGF0YS1hdHRycywgbG9jYWxlcywgZGVmYXVsdHNcclxuICAgICAgICAgICAgICAgICAgICBvcHRzID0gJC5leHRlbmQoe30sIGRlZmF1bHRzLCBsb2NvcHRzLCBlbG9wdHMsIG9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCR0aGlzLmhhc0NsYXNzKCdpbnB1dC1kYXRlcmFuZ2UnKSB8fCBvcHRzLmlucHV0cyl7XHJcbiAgICAgICAgICAgICAgICAgICAgJC5leHRlbmQob3B0cywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHM6IG9wdHMuaW5wdXRzIHx8ICR0aGlzLmZpbmQoJ2lucHV0JykudG9BcnJheSgpXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IG5ldyBEYXRlUmFuZ2VQaWNrZXIodGhpcywgb3B0cyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhID0gbmV3IERhdGVwaWNrZXIodGhpcywgb3B0cyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAkdGhpcy5kYXRhKCdkYXRlcGlja2VyJywgZGF0YSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT09ICdzdHJpbmcnICYmIHR5cGVvZiBkYXRhW29wdGlvbl0gPT09ICdmdW5jdGlvbicpe1xyXG4gICAgICAgICAgICAgICAgaW50ZXJuYWxfcmV0dXJuID0gZGF0YVtvcHRpb25dLmFwcGx5KGRhdGEsIGFyZ3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgaW50ZXJuYWxfcmV0dXJuID09PSB1bmRlZmluZWQgfHxcclxuICAgICAgICAgICAgaW50ZXJuYWxfcmV0dXJuIGluc3RhbmNlb2YgRGF0ZXBpY2tlciB8fFxyXG4gICAgICAgICAgICBpbnRlcm5hbF9yZXR1cm4gaW5zdGFuY2VvZiBEYXRlUmFuZ2VQaWNrZXJcclxuICAgICAgICApXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5sZW5ndGggPiAxKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VzaW5nIG9ubHkgYWxsb3dlZCBmb3IgdGhlIGNvbGxlY3Rpb24gb2YgYSBzaW5nbGUgZWxlbWVudCAoJyArIG9wdGlvbiArICcgZnVuY3Rpb24pJyk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICByZXR1cm4gaW50ZXJuYWxfcmV0dXJuO1xyXG4gICAgfTtcclxuICAgICQuZm4uZGF0ZXBpY2tlciA9IGRhdGVwaWNrZXJQbHVnaW47XHJcblxyXG4gICAgdmFyIGRlZmF1bHRzID0gJC5mbi5kYXRlcGlja2VyLmRlZmF1bHRzID0ge1xyXG4gICAgICAgIGFzc3VtZU5lYXJieVllYXI6IGZhbHNlLFxyXG4gICAgICAgIGF1dG9jbG9zZTogZmFsc2UsXHJcbiAgICAgICAgYmVmb3JlU2hvd0RheTogJC5ub29wLFxyXG4gICAgICAgIGJlZm9yZVNob3dNb250aDogJC5ub29wLFxyXG4gICAgICAgIGJlZm9yZVNob3dZZWFyOiAkLm5vb3AsXHJcbiAgICAgICAgYmVmb3JlU2hvd0RlY2FkZTogJC5ub29wLFxyXG4gICAgICAgIGJlZm9yZVNob3dDZW50dXJ5OiAkLm5vb3AsXHJcbiAgICAgICAgY2FsZW5kYXJXZWVrczogZmFsc2UsXHJcbiAgICAgICAgY2xlYXJCdG46IGZhbHNlLFxyXG4gICAgICAgIHRvZ2dsZUFjdGl2ZTogZmFsc2UsXHJcbiAgICAgICAgZGF5c09mV2Vla0Rpc2FibGVkOiBbXSxcclxuICAgICAgICBkYXlzT2ZXZWVrSGlnaGxpZ2h0ZWQ6IFtdLFxyXG4gICAgICAgIGRhdGVzRGlzYWJsZWQ6IFtdLFxyXG4gICAgICAgIGVuZERhdGU6IEluZmluaXR5LFxyXG4gICAgICAgIGZvcmNlUGFyc2U6IHRydWUsXHJcbiAgICAgICAgZm9ybWF0OiAnbW0vZGQveXl5eScsXHJcbiAgICAgICAga2VlcEVtcHR5VmFsdWVzOiBmYWxzZSxcclxuICAgICAgICBrZXlib2FyZE5hdmlnYXRpb246IHRydWUsXHJcbiAgICAgICAgbGFuZ3VhZ2U6ICdlbicsXHJcbiAgICAgICAgbWluVmlld01vZGU6IDAsXHJcbiAgICAgICAgbWF4Vmlld01vZGU6IDQsXHJcbiAgICAgICAgbXVsdGlkYXRlOiBmYWxzZSxcclxuICAgICAgICBtdWx0aWRhdGVTZXBhcmF0b3I6ICcsJyxcclxuICAgICAgICBvcmllbnRhdGlvbjogXCJhdXRvXCIsXHJcbiAgICAgICAgcnRsOiBmYWxzZSxcclxuICAgICAgICBzdGFydERhdGU6IC1JbmZpbml0eSxcclxuICAgICAgICBzdGFydFZpZXc6IDAsXHJcbiAgICAgICAgdG9kYXlCdG46IGZhbHNlLFxyXG4gICAgICAgIHRvZGF5SGlnaGxpZ2h0OiBmYWxzZSxcclxuICAgICAgICB1cGRhdGVWaWV3RGF0ZTogdHJ1ZSxcclxuICAgICAgICB3ZWVrU3RhcnQ6IDAsXHJcbiAgICAgICAgZGlzYWJsZVRvdWNoS2V5Ym9hcmQ6IGZhbHNlLFxyXG4gICAgICAgIGVuYWJsZU9uUmVhZG9ubHk6IHRydWUsXHJcbiAgICAgICAgc2hvd09uRm9jdXM6IHRydWUsXHJcbiAgICAgICAgekluZGV4T2Zmc2V0OiAxMCxcclxuICAgICAgICBjb250YWluZXI6ICdib2R5JyxcclxuICAgICAgICBpbW1lZGlhdGVVcGRhdGVzOiBmYWxzZSxcclxuICAgICAgICB0aXRsZTogJycsXHJcbiAgICAgICAgdGVtcGxhdGVzOiB7XHJcbiAgICAgICAgICAgIGxlZnRBcnJvdzogJyYjeDAwQUI7JyxcclxuICAgICAgICAgICAgcmlnaHRBcnJvdzogJyYjeDAwQkI7J1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2hvd1dlZWtEYXlzOiB0cnVlXHJcbiAgICB9O1xyXG4gICAgdmFyIGxvY2FsZV9vcHRzID0gJC5mbi5kYXRlcGlja2VyLmxvY2FsZV9vcHRzID0gW1xyXG4gICAgICAgICdmb3JtYXQnLFxyXG4gICAgICAgICdydGwnLFxyXG4gICAgICAgICd3ZWVrU3RhcnQnXHJcbiAgICBdO1xyXG4gICAgJC5mbi5kYXRlcGlja2VyLkNvbnN0cnVjdG9yID0gRGF0ZXBpY2tlcjtcclxuICAgIHZhciBkYXRlcyA9ICQuZm4uZGF0ZXBpY2tlci5kYXRlcyA9IHtcclxuICAgICAgICBlbjoge1xyXG4gICAgICAgICAgICBkYXlzOiBbXCJTdW5kYXlcIiwgXCJNb25kYXlcIiwgXCJUdWVzZGF5XCIsIFwiV2VkbmVzZGF5XCIsIFwiVGh1cnNkYXlcIiwgXCJGcmlkYXlcIiwgXCJTYXR1cmRheVwiXSxcclxuICAgICAgICAgICAgZGF5c1Nob3J0OiBbXCJTdW5cIiwgXCJNb25cIiwgXCJUdWVcIiwgXCJXZWRcIiwgXCJUaHVcIiwgXCJGcmlcIiwgXCJTYXRcIl0sXHJcbiAgICAgICAgICAgIGRheXNNaW46IFtcIlN1XCIsIFwiTW9cIiwgXCJUdVwiLCBcIldlXCIsIFwiVGhcIiwgXCJGclwiLCBcIlNhXCJdLFxyXG4gICAgICAgICAgICBtb250aHM6IFtcIkphbnVhcnlcIiwgXCJGZWJydWFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVseVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCJdLFxyXG4gICAgICAgICAgICBtb250aHNTaG9ydDogW1wiSmFuXCIsIFwiRmViXCIsIFwiTWFyXCIsIFwiQXByXCIsIFwiTWF5XCIsIFwiSnVuXCIsIFwiSnVsXCIsIFwiQXVnXCIsIFwiU2VwXCIsIFwiT2N0XCIsIFwiTm92XCIsIFwiRGVjXCJdLFxyXG4gICAgICAgICAgICB0b2RheTogXCJUb2RheVwiLFxyXG4gICAgICAgICAgICBjbGVhcjogXCJDbGVhclwiLFxyXG4gICAgICAgICAgICB0aXRsZUZvcm1hdDogXCJNTSB5eXl5XCJcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBEUEdsb2JhbCA9IHtcclxuICAgICAgICB2aWV3TW9kZXM6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbmFtZXM6IFsnZGF5cycsICdtb250aCddLFxyXG4gICAgICAgICAgICAgICAgY2xzTmFtZTogJ2RheXMnLFxyXG4gICAgICAgICAgICAgICAgZTogJ2NoYW5nZU1vbnRoJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBuYW1lczogWydtb250aHMnLCAneWVhciddLFxyXG4gICAgICAgICAgICAgICAgY2xzTmFtZTogJ21vbnRocycsXHJcbiAgICAgICAgICAgICAgICBlOiAnY2hhbmdlWWVhcicsXHJcbiAgICAgICAgICAgICAgICBuYXZTdGVwOiAxXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIG5hbWVzOiBbJ3llYXJzJywgJ2RlY2FkZSddLFxyXG4gICAgICAgICAgICAgICAgY2xzTmFtZTogJ3llYXJzJyxcclxuICAgICAgICAgICAgICAgIGU6ICdjaGFuZ2VEZWNhZGUnLFxyXG4gICAgICAgICAgICAgICAgbmF2U3RlcDogMTBcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbmFtZXM6IFsnZGVjYWRlcycsICdjZW50dXJ5J10sXHJcbiAgICAgICAgICAgICAgICBjbHNOYW1lOiAnZGVjYWRlcycsXHJcbiAgICAgICAgICAgICAgICBlOiAnY2hhbmdlQ2VudHVyeScsXHJcbiAgICAgICAgICAgICAgICBuYXZTdGVwOiAxMDBcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbmFtZXM6IFsnY2VudHVyaWVzJywgJ21pbGxlbm5pdW0nXSxcclxuICAgICAgICAgICAgICAgIGNsc05hbWU6ICdjZW50dXJpZXMnLFxyXG4gICAgICAgICAgICAgICAgZTogJ2NoYW5nZU1pbGxlbm5pdW0nLFxyXG4gICAgICAgICAgICAgICAgbmF2U3RlcDogMTAwMFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXSxcclxuICAgICAgICB2YWxpZFBhcnRzOiAvZGQ/fEREP3xtbT98TU0/fHl5KD86eXkpPy9nLFxyXG4gICAgICAgIG5vbnB1bmN0dWF0aW9uOiAvW14gLVxcLzotQFxcdTVlNzRcXHU2NzA4XFx1NjVlNVxcWy1gey1+XFx0XFxuXFxyXSsvZyxcclxuICAgICAgICBwYXJzZUZvcm1hdDogZnVuY3Rpb24oZm9ybWF0KXtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBmb3JtYXQudG9WYWx1ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZm9ybWF0LnRvRGlzcGxheSA9PT0gJ2Z1bmN0aW9uJylcclxuICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXQ7XHJcbiAgICAgICAgICAgIC8vIElFIHRyZWF0cyBcXDAgYXMgYSBzdHJpbmcgZW5kIGluIGlucHV0cyAodHJ1bmNhdGluZyB0aGUgdmFsdWUpLFxyXG4gICAgICAgICAgICAvLyBzbyBpdCdzIGEgYmFkIGZvcm1hdCBkZWxpbWl0ZXIsIGFueXdheVxyXG4gICAgICAgICAgICB2YXIgc2VwYXJhdG9ycyA9IGZvcm1hdC5yZXBsYWNlKHRoaXMudmFsaWRQYXJ0cywgJ1xcMCcpLnNwbGl0KCdcXDAnKSxcclxuICAgICAgICAgICAgICAgIHBhcnRzID0gZm9ybWF0Lm1hdGNoKHRoaXMudmFsaWRQYXJ0cyk7XHJcbiAgICAgICAgICAgIGlmICghc2VwYXJhdG9ycyB8fCAhc2VwYXJhdG9ycy5sZW5ndGggfHwgIXBhcnRzIHx8IHBhcnRzLmxlbmd0aCA9PT0gMCl7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGRhdGUgZm9ybWF0LlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4ge3NlcGFyYXRvcnM6IHNlcGFyYXRvcnMsIHBhcnRzOiBwYXJ0c307XHJcbiAgICAgICAgfSxcclxuICAgICAgICBwYXJzZURhdGU6IGZ1bmN0aW9uKGRhdGUsIGZvcm1hdCwgbGFuZ3VhZ2UsIGFzc3VtZU5lYXJieSl7XHJcbiAgICAgICAgICAgIGlmICghZGF0ZSlcclxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIGlmIChkYXRlIGluc3RhbmNlb2YgRGF0ZSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRlO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGZvcm1hdCA9PT0gJ3N0cmluZycpXHJcbiAgICAgICAgICAgICAgICBmb3JtYXQgPSBEUEdsb2JhbC5wYXJzZUZvcm1hdChmb3JtYXQpO1xyXG4gICAgICAgICAgICBpZiAoZm9ybWF0LnRvVmFsdWUpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0LnRvVmFsdWUoZGF0ZSwgZm9ybWF0LCBsYW5ndWFnZSk7XHJcbiAgICAgICAgICAgIHZhciBmbl9tYXAgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZDogJ21vdmVEYXknLFxyXG4gICAgICAgICAgICAgICAgICAgIG06ICdtb3ZlTW9udGgnLFxyXG4gICAgICAgICAgICAgICAgICAgIHc6ICdtb3ZlV2VlaycsXHJcbiAgICAgICAgICAgICAgICAgICAgeTogJ21vdmVZZWFyJ1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGRhdGVBbGlhc2VzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHllc3RlcmRheTogJy0xZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgdG9kYXk6ICcrMGQnLFxyXG4gICAgICAgICAgICAgICAgICAgIHRvbW9ycm93OiAnKzFkJ1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHBhcnRzLCBwYXJ0LCBkaXIsIGksIGZuO1xyXG4gICAgICAgICAgICBpZiAoZGF0ZSBpbiBkYXRlQWxpYXNlcyl7XHJcbiAgICAgICAgICAgICAgICBkYXRlID0gZGF0ZUFsaWFzZXNbZGF0ZV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKC9eW1xcLStdXFxkK1tkbXd5XShbXFxzLF0rW1xcLStdXFxkK1tkbXd5XSkqJC9pLnRlc3QoZGF0ZSkpe1xyXG4gICAgICAgICAgICAgICAgcGFydHMgPSBkYXRlLm1hdGNoKC8oW1xcLStdXFxkKykoW2Rtd3ldKS9naSk7XHJcbiAgICAgICAgICAgICAgICBkYXRlID0gbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgICAgIGZvciAoaT0wOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcnQgPSBwYXJ0c1tpXS5tYXRjaCgvKFtcXC0rXVxcZCspKFtkbXd5XSkvaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlyID0gTnVtYmVyKHBhcnRbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGZuID0gZm5fbWFwW3BhcnRbMl0udG9Mb3dlckNhc2UoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0ZSA9IERhdGVwaWNrZXIucHJvdG90eXBlW2ZuXShkYXRlLCBkaXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIERhdGVwaWNrZXIucHJvdG90eXBlLl96ZXJvX3V0Y190aW1lKGRhdGUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBwYXJ0cyA9IGRhdGUgJiYgZGF0ZS5tYXRjaCh0aGlzLm5vbnB1bmN0dWF0aW9uKSB8fCBbXTtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGFwcGx5TmVhcmJ5WWVhcih5ZWFyLCB0aHJlc2hvbGQpe1xyXG4gICAgICAgICAgICAgICAgaWYgKHRocmVzaG9sZCA9PT0gdHJ1ZSlcclxuICAgICAgICAgICAgICAgICAgICB0aHJlc2hvbGQgPSAxMDtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBpZiB5ZWFyIGlzIDIgZGlnaXRzIG9yIGxlc3MsIHRoYW4gdGhlIHVzZXIgbW9zdCBsaWtlbHkgaXMgdHJ5aW5nIHRvIGdldCBhIHJlY2VudCBjZW50dXJ5XHJcbiAgICAgICAgICAgICAgICBpZiAoeWVhciA8IDEwMCl7XHJcbiAgICAgICAgICAgICAgICAgICAgeWVhciArPSAyMDAwO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBuZXcgeWVhciBpcyBtb3JlIHRoYW4gdGhyZXNob2xkIHllYXJzIGluIGFkdmFuY2UsIHVzZSBsYXN0IGNlbnR1cnlcclxuICAgICAgICAgICAgICAgICAgICBpZiAoeWVhciA+ICgobmV3IERhdGUoKSkuZ2V0RnVsbFllYXIoKSt0aHJlc2hvbGQpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeWVhciAtPSAxMDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB5ZWFyO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgcGFyc2VkID0ge30sXHJcbiAgICAgICAgICAgICAgICBzZXR0ZXJzX29yZGVyID0gWyd5eXl5JywgJ3l5JywgJ00nLCAnTU0nLCAnbScsICdtbScsICdkJywgJ2RkJ10sXHJcbiAgICAgICAgICAgICAgICBzZXR0ZXJzX21hcCA9IHtcclxuICAgICAgICAgICAgICAgICAgICB5eXl5OiBmdW5jdGlvbihkLHYpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC5zZXRVVENGdWxsWWVhcihhc3N1bWVOZWFyYnkgPyBhcHBseU5lYXJieVllYXIodiwgYXNzdW1lTmVhcmJ5KSA6IHYpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgbTogZnVuY3Rpb24oZCx2KXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKGQpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHYgLT0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHYgPCAwKSB2ICs9IDEyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2ICU9IDEyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkLnNldFVUQ01vbnRoKHYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoZC5nZXRVVENNb250aCgpICE9PSB2KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5zZXRVVENEYXRlKGQuZ2V0VVRDRGF0ZSgpLTEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZDtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGQ6IGZ1bmN0aW9uKGQsdil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnNldFVUQ0RhdGUodik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHZhbCwgZmlsdGVyZWQ7XHJcbiAgICAgICAgICAgIHNldHRlcnNfbWFwWyd5eSddID0gc2V0dGVyc19tYXBbJ3l5eXknXTtcclxuICAgICAgICAgICAgc2V0dGVyc19tYXBbJ00nXSA9IHNldHRlcnNfbWFwWydNTSddID0gc2V0dGVyc19tYXBbJ21tJ10gPSBzZXR0ZXJzX21hcFsnbSddO1xyXG4gICAgICAgICAgICBzZXR0ZXJzX21hcFsnZGQnXSA9IHNldHRlcnNfbWFwWydkJ107XHJcbiAgICAgICAgICAgIGRhdGUgPSBVVENUb2RheSgpO1xyXG4gICAgICAgICAgICB2YXIgZnBhcnRzID0gZm9ybWF0LnBhcnRzLnNsaWNlKCk7XHJcbiAgICAgICAgICAgIC8vIFJlbW92ZSBub29wIHBhcnRzXHJcbiAgICAgICAgICAgIGlmIChwYXJ0cy5sZW5ndGggIT09IGZwYXJ0cy5sZW5ndGgpe1xyXG4gICAgICAgICAgICAgICAgZnBhcnRzID0gJChmcGFydHMpLmZpbHRlcihmdW5jdGlvbihpLHApe1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkLmluQXJyYXkocCwgc2V0dGVyc19vcmRlcikgIT09IC0xO1xyXG4gICAgICAgICAgICAgICAgfSkudG9BcnJheSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIFByb2Nlc3MgcmVtYWluZGVyXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIG1hdGNoX3BhcnQoKXtcclxuICAgICAgICAgICAgICAgIHZhciBtID0gdGhpcy5zbGljZSgwLCBwYXJ0c1tpXS5sZW5ndGgpLFxyXG4gICAgICAgICAgICAgICAgICAgIHAgPSBwYXJ0c1tpXS5zbGljZSgwLCBtLmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbS50b0xvd2VyQ2FzZSgpID09PSBwLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHBhcnRzLmxlbmd0aCA9PT0gZnBhcnRzLmxlbmd0aCl7XHJcbiAgICAgICAgICAgICAgICB2YXIgY250O1xyXG4gICAgICAgICAgICAgICAgZm9yIChpPTAsIGNudCA9IGZwYXJ0cy5sZW5ndGg7IGkgPCBjbnQ7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsID0gcGFyc2VJbnQocGFydHNbaV0sIDEwKTtcclxuICAgICAgICAgICAgICAgICAgICBwYXJ0ID0gZnBhcnRzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc05hTih2YWwpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChwYXJ0KXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ01NJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZCA9ICQoZGF0ZXNbbGFuZ3VhZ2VdLm1vbnRocykuZmlsdGVyKG1hdGNoX3BhcnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbCA9ICQuaW5BcnJheShmaWx0ZXJlZFswXSwgZGF0ZXNbbGFuZ3VhZ2VdLm1vbnRocykgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnTSc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyZWQgPSAkKGRhdGVzW2xhbmd1YWdlXS5tb250aHNTaG9ydCkuZmlsdGVyKG1hdGNoX3BhcnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbCA9ICQuaW5BcnJheShmaWx0ZXJlZFswXSwgZGF0ZXNbbGFuZ3VhZ2VdLm1vbnRoc1Nob3J0KSArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkW3BhcnRdID0gdmFsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIF9kYXRlLCBzO1xyXG4gICAgICAgICAgICAgICAgZm9yIChpPTA7IGkgPCBzZXR0ZXJzX29yZGVyLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgICAgICBzID0gc2V0dGVyc19vcmRlcltpXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocyBpbiBwYXJzZWQgJiYgIWlzTmFOKHBhcnNlZFtzXSkpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfZGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXR0ZXJzX21hcFtzXShfZGF0ZSwgcGFyc2VkW3NdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc05hTihfZGF0ZSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlID0gX2RhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBkYXRlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZm9ybWF0RGF0ZTogZnVuY3Rpb24oZGF0ZSwgZm9ybWF0LCBsYW5ndWFnZSl7XHJcbiAgICAgICAgICAgIGlmICghZGF0ZSlcclxuICAgICAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBmb3JtYXQgPT09ICdzdHJpbmcnKVxyXG4gICAgICAgICAgICAgICAgZm9ybWF0ID0gRFBHbG9iYWwucGFyc2VGb3JtYXQoZm9ybWF0KTtcclxuICAgICAgICAgICAgaWYgKGZvcm1hdC50b0Rpc3BsYXkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0LnRvRGlzcGxheShkYXRlLCBmb3JtYXQsIGxhbmd1YWdlKTtcclxuICAgICAgICAgICAgdmFyIHZhbCA9IHtcclxuICAgICAgICAgICAgICAgIGQ6IGRhdGUuZ2V0VVRDRGF0ZSgpLFxyXG4gICAgICAgICAgICAgICAgRDogZGF0ZXNbbGFuZ3VhZ2VdLmRheXNTaG9ydFtkYXRlLmdldFVUQ0RheSgpXSxcclxuICAgICAgICAgICAgICAgIEREOiBkYXRlc1tsYW5ndWFnZV0uZGF5c1tkYXRlLmdldFVUQ0RheSgpXSxcclxuICAgICAgICAgICAgICAgIG06IGRhdGUuZ2V0VVRDTW9udGgoKSArIDEsXHJcbiAgICAgICAgICAgICAgICBNOiBkYXRlc1tsYW5ndWFnZV0ubW9udGhzU2hvcnRbZGF0ZS5nZXRVVENNb250aCgpXSxcclxuICAgICAgICAgICAgICAgIE1NOiBkYXRlc1tsYW5ndWFnZV0ubW9udGhzW2RhdGUuZ2V0VVRDTW9udGgoKV0sXHJcbiAgICAgICAgICAgICAgICB5eTogZGF0ZS5nZXRVVENGdWxsWWVhcigpLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDIpLFxyXG4gICAgICAgICAgICAgICAgeXl5eTogZGF0ZS5nZXRVVENGdWxsWWVhcigpXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHZhbC5kZCA9ICh2YWwuZCA8IDEwID8gJzAnIDogJycpICsgdmFsLmQ7XHJcbiAgICAgICAgICAgIHZhbC5tbSA9ICh2YWwubSA8IDEwID8gJzAnIDogJycpICsgdmFsLm07XHJcbiAgICAgICAgICAgIGRhdGUgPSBbXTtcclxuICAgICAgICAgICAgdmFyIHNlcHMgPSAkLmV4dGVuZChbXSwgZm9ybWF0LnNlcGFyYXRvcnMpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpPTAsIGNudCA9IGZvcm1hdC5wYXJ0cy5sZW5ndGg7IGkgPD0gY250OyBpKyspe1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlcHMubGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGUucHVzaChzZXBzLnNoaWZ0KCkpO1xyXG4gICAgICAgICAgICAgICAgZGF0ZS5wdXNoKHZhbFtmb3JtYXQucGFydHNbaV1dKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZGF0ZS5qb2luKCcnKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGhlYWRUZW1wbGF0ZTogJzx0aGVhZD4nK1xyXG4gICAgICAgICc8dHI+JytcclxuICAgICAgICAnPHRoIGNvbHNwYW49XCI3XCIgY2xhc3M9XCJkYXRlcGlja2VyLXRpdGxlXCI+PC90aD4nK1xyXG4gICAgICAgICc8L3RyPicrXHJcbiAgICAgICAgJzx0cj4nK1xyXG4gICAgICAgICc8dGggY2xhc3M9XCJwcmV2XCI+JytkZWZhdWx0cy50ZW1wbGF0ZXMubGVmdEFycm93Kyc8L3RoPicrXHJcbiAgICAgICAgJzx0aCBjb2xzcGFuPVwiNVwiIGNsYXNzPVwiZGF0ZXBpY2tlci1zd2l0Y2hcIj48L3RoPicrXHJcbiAgICAgICAgJzx0aCBjbGFzcz1cIm5leHRcIj4nK2RlZmF1bHRzLnRlbXBsYXRlcy5yaWdodEFycm93Kyc8L3RoPicrXHJcbiAgICAgICAgJzwvdHI+JytcclxuICAgICAgICAnPC90aGVhZD4nLFxyXG4gICAgICAgIGNvbnRUZW1wbGF0ZTogJzx0Ym9keT48dHI+PHRkIGNvbHNwYW49XCI3XCI+PC90ZD48L3RyPjwvdGJvZHk+JyxcclxuICAgICAgICBmb290VGVtcGxhdGU6ICc8dGZvb3Q+JytcclxuICAgICAgICAnPHRyPicrXHJcbiAgICAgICAgJzx0aCBjb2xzcGFuPVwiN1wiIGNsYXNzPVwidG9kYXlcIj48L3RoPicrXHJcbiAgICAgICAgJzwvdHI+JytcclxuICAgICAgICAnPHRyPicrXHJcbiAgICAgICAgJzx0aCBjb2xzcGFuPVwiN1wiIGNsYXNzPVwiY2xlYXJcIj48L3RoPicrXHJcbiAgICAgICAgJzwvdHI+JytcclxuICAgICAgICAnPC90Zm9vdD4nXHJcbiAgICB9O1xyXG4gICAgRFBHbG9iYWwudGVtcGxhdGUgPSAnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXJcIj4nK1xyXG4gICAgICAgICc8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci1kYXlzXCI+JytcclxuICAgICAgICAnPHRhYmxlIGNsYXNzPVwidGFibGUtY29uZGVuc2VkXCI+JytcclxuICAgICAgICBEUEdsb2JhbC5oZWFkVGVtcGxhdGUrXHJcbiAgICAgICAgJzx0Ym9keT48L3Rib2R5PicrXHJcbiAgICAgICAgRFBHbG9iYWwuZm9vdFRlbXBsYXRlK1xyXG4gICAgICAgICc8L3RhYmxlPicrXHJcbiAgICAgICAgJzwvZGl2PicrXHJcbiAgICAgICAgJzxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLW1vbnRoc1wiPicrXHJcbiAgICAgICAgJzx0YWJsZSBjbGFzcz1cInRhYmxlLWNvbmRlbnNlZFwiPicrXHJcbiAgICAgICAgRFBHbG9iYWwuaGVhZFRlbXBsYXRlK1xyXG4gICAgICAgIERQR2xvYmFsLmNvbnRUZW1wbGF0ZStcclxuICAgICAgICBEUEdsb2JhbC5mb290VGVtcGxhdGUrXHJcbiAgICAgICAgJzwvdGFibGU+JytcclxuICAgICAgICAnPC9kaXY+JytcclxuICAgICAgICAnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXIteWVhcnNcIj4nK1xyXG4gICAgICAgICc8dGFibGUgY2xhc3M9XCJ0YWJsZS1jb25kZW5zZWRcIj4nK1xyXG4gICAgICAgIERQR2xvYmFsLmhlYWRUZW1wbGF0ZStcclxuICAgICAgICBEUEdsb2JhbC5jb250VGVtcGxhdGUrXHJcbiAgICAgICAgRFBHbG9iYWwuZm9vdFRlbXBsYXRlK1xyXG4gICAgICAgICc8L3RhYmxlPicrXHJcbiAgICAgICAgJzwvZGl2PicrXHJcbiAgICAgICAgJzxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLWRlY2FkZXNcIj4nK1xyXG4gICAgICAgICc8dGFibGUgY2xhc3M9XCJ0YWJsZS1jb25kZW5zZWRcIj4nK1xyXG4gICAgICAgIERQR2xvYmFsLmhlYWRUZW1wbGF0ZStcclxuICAgICAgICBEUEdsb2JhbC5jb250VGVtcGxhdGUrXHJcbiAgICAgICAgRFBHbG9iYWwuZm9vdFRlbXBsYXRlK1xyXG4gICAgICAgICc8L3RhYmxlPicrXHJcbiAgICAgICAgJzwvZGl2PicrXHJcbiAgICAgICAgJzxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLWNlbnR1cmllc1wiPicrXHJcbiAgICAgICAgJzx0YWJsZSBjbGFzcz1cInRhYmxlLWNvbmRlbnNlZFwiPicrXHJcbiAgICAgICAgRFBHbG9iYWwuaGVhZFRlbXBsYXRlK1xyXG4gICAgICAgIERQR2xvYmFsLmNvbnRUZW1wbGF0ZStcclxuICAgICAgICBEUEdsb2JhbC5mb290VGVtcGxhdGUrXHJcbiAgICAgICAgJzwvdGFibGU+JytcclxuICAgICAgICAnPC9kaXY+JytcclxuICAgICAgICAnPC9kaXY+JztcclxuXHJcbiAgICAkLmZuLmRhdGVwaWNrZXIuRFBHbG9iYWwgPSBEUEdsb2JhbDtcclxuXHJcblxyXG4gICAgLyogREFURVBJQ0tFUiBOTyBDT05GTElDVFxyXG4gICAgICogPT09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxuICAgICQuZm4uZGF0ZXBpY2tlci5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAkLmZuLmRhdGVwaWNrZXIgPSBvbGQ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qIERBVEVQSUNLRVIgVkVSU0lPTlxyXG4gICAgICogPT09PT09PT09PT09PT09PT09PSAqL1xyXG4gICAgJC5mbi5kYXRlcGlja2VyLnZlcnNpb24gPSAnMS43LjEnO1xyXG5cclxuICAgICQuZm4uZGF0ZXBpY2tlci5kZXByZWNhdGVkID0gZnVuY3Rpb24obXNnKXtcclxuICAgICAgICB2YXIgY29uc29sZSA9IHdpbmRvdy5jb25zb2xlO1xyXG4gICAgICAgIGlmIChjb25zb2xlICYmIGNvbnNvbGUud2Fybikge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0RFUFJFQ0FURUQ6ICcgKyBtc2cpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qIERBVEVQSUNLRVIgREFUQS1BUElcclxuICAgICAqID09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxuICAgICQoZG9jdW1lbnQpLm9uKFxyXG4gICAgICAgICdmb2N1cy5kYXRlcGlja2VyLmRhdGEtYXBpIGNsaWNrLmRhdGVwaWNrZXIuZGF0YS1hcGknLFxyXG4gICAgICAgICdbZGF0YS1wcm92aWRlPVwiZGF0ZXBpY2tlclwiXScsXHJcbiAgICAgICAgZnVuY3Rpb24oZSl7XHJcbiAgICAgICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyk7XHJcbiAgICAgICAgICAgIGlmICgkdGhpcy5kYXRhKCdkYXRlcGlja2VyJykpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgLy8gY29tcG9uZW50IGNsaWNrIHJlcXVpcmVzIHVzIHRvIGV4cGxpY2l0bHkgc2hvdyBpdFxyXG4gICAgICAgICAgICBkYXRlcGlja2VyUGx1Z2luLmNhbGwoJHRoaXMsICdzaG93Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgKTtcclxuICAgICQoZnVuY3Rpb24oKXtcclxuICAgICAgICBkYXRlcGlja2VyUGx1Z2luLmNhbGwoJCgnW2RhdGEtcHJvdmlkZT1cImRhdGVwaWNrZXItaW5saW5lXCJdJykpO1xyXG4gICAgfSk7XHJcblxyXG59KSk7XHJcbiJdfQ==
